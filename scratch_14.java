import java.math.BigInteger;
import java.util.*;
import java.util.stream.Collectors;

class Scratch {
    public static void main(String[] args) {
        int[][] arr = new int[][]{{3, 1, 2}, {3, 2, 3}, {3, 3, 4}, {3, 4, 5}, {3, 5, 6}, {3, 3, 7}, {3, 1, 8}, {1, 3, 9}, {2, 3, 9}, {1, 6, 10}, {2, 6, 10}, {3, 2, 11}, {1, 9, 12}, {2, 9, 12}, {3, 11, 13}, {3, 4, 14}, {3, 10, 15}, {3, 6, 16}, {3, 7, 17}, {3, 6, 18}, {3, 18, 19}, {1, 18, 20}, {2, 18, 20}, {1, 1, 21}, {2, 1, 21}, {3, 16, 22}, {3, 18, 23}, {3, 13, 24}, {1, 4, 25}, {2, 4, 25}, {1, 23, 26}, {2, 23, 26}, {1, 22, 27}, {2, 22, 27}, {3, 7, 28}, {1, 17, 29}, {2, 17, 29}, {3, 23, 30}, {1, 7, 31}, {2, 7, 31}, {1, 4, 32}, {2, 4, 32}, {3, 9, 33}, {3, 13, 34}, {3, 8, 35}, {3, 22, 36}, {1, 33, 37}, {2, 33, 37}, {3, 2, 38}, {3, 31, 39}, {1, 30, 40}, {2, 30, 40}, {1, 27, 41}, {2, 27, 41}, {3, 10, 42}, {1, 9, 43}, {2, 9, 43}, {1, 3, 44}, {2, 3, 44}, {1, 4, 45}, {2, 4, 45}, {3, 34, 46}, {1, 38, 47}, {2, 38, 47}, {3, 22, 48}, {1, 15, 49}, {2, 15, 49}, {3, 18, 50}, {3, 15, 51}, {1, 46, 52}, {2, 46, 52}, {3, 27, 53}, {3, 43, 54}, {1, 26, 55}, {2, 26, 55}, {3, 24, 56}, {1, 52, 57}, {2, 52, 57}, {3, 28, 58}, {1, 8, 59}, {2, 8, 59}, {3, 39, 60}, {1, 52, 61}, {2, 52, 61}, {3, 6, 62}, {3, 7, 63}, {1, 46, 64}, {2, 46, 64}, {1, 9, 65}, {2, 9, 65}, {3, 62, 66}, {3, 39, 67}, {1, 53, 68}, {2, 53, 68}, {1, 28, 69}, {2, 28, 69}, {1, 15, 70}, {2, 15, 70}, {1, 58, 71}, {2, 58, 71}, {3, 13, 72}, {3, 50, 73}, {3, 69, 74}, {3, 62, 75}, {3, 52, 76}, {3, 50, 77}, {3, 19, 78}, {1, 61, 79}, {2, 61, 79}, {1, 6, 80}, {2, 6, 80}, {1, 18, 81}, {2, 18, 81}, {3, 31, 82}, {3, 82, 83}, {1, 68, 84}, {2, 68, 84}, {1, 82, 85}, {2, 82, 85}, {1, 42, 86}, {2, 42, 86}, {3, 49, 87}, {1, 38, 88}, {2, 38, 88}, {3, 31, 89}, {3, 3, 90}, {1, 25, 91}, {2, 25, 91}, {3, 68, 92}, {3, 81, 93}, {1, 34, 94}, {2, 34, 94}, {3, 58, 95}, {1, 65, 96}, {2, 65, 96}, {3, 31, 97}, {1, 25, 98}, {2, 25, 98}, {3, 61, 99}, {3, 68, 100}, {3, 90, 101}, {1, 58, 102}, {2, 58, 102}, {3, 93, 103}, {1, 46, 104}, {2, 46, 104}, {1, 23, 105}, {2, 23, 105}, {3, 19, 106}, {3, 103, 107}, {1, 106, 108}, {2, 106, 108}, {3, 46, 109}, {3, 63, 110}, {3, 59, 111}, {1, 86, 112}, {2, 86, 112}, {3, 96, 113}, {3, 55, 114}, {1, 42, 115}, {2, 42, 115}, {3, 8, 116}, {1, 95, 117}, {2, 95, 117}, {3, 16, 118}, {1, 111, 119}, {2, 111, 119}, {3, 106, 120}, {3, 101, 121}, {1, 21, 122}, {2, 21, 122}, {3, 24, 123}, {3, 107, 124}, {1, 68, 125}, {2, 68, 125}, {3, 15, 126}, {3, 62, 127}, {3, 87, 128}, {1, 74, 129}, {2, 74, 129}, {1, 2, 130}, {2, 2, 130}, {3, 101, 131}, {1, 26, 132}, {2, 26, 132}, {1, 21, 133}, {2, 21, 133}, {1, 22, 134}, {2, 22, 134}, {3, 129, 135}, {3, 67, 136}, {3, 82, 137}, {3, 131, 138}, {3, 57, 139}, {1, 104, 140}, {2, 104, 140}, {3, 8, 141}, {1, 43, 142}, {2, 43, 142}, {1, 111, 143}, {2, 111, 143}, {3, 48, 144}, {1, 120, 145}, {2, 120, 145}, {1, 139, 146}, {2, 139, 146}, {1, 131, 147}, {2, 131, 147}, {3, 106, 148}, {3, 59, 149}, {1, 113, 150}, {2, 113, 150}, {3, 143, 151}, {1, 88, 152}, {2, 88, 152}, {1, 22, 153}, {2, 22, 153}, {3, 113, 154}, {3, 152, 155}, {1, 134, 156}, {2, 134, 156}, {1, 71, 157}, {2, 71, 157}, {1, 78, 158}, {2, 78, 158}, {3, 154, 159}, {1, 146, 160}, {2, 146, 160}, {3, 6, 161}, {3, 147, 162}, {3, 143, 163}, {3, 40, 164}, {1, 9, 165}, {2, 9, 165}, {3, 60, 166}, {3, 157, 167}, {1, 76, 168}, {2, 76, 168}, {3, 50, 169}, {3, 109, 170}, {3, 142, 171}, {3, 75, 172}, {3, 138, 173}, {3, 28, 174}, {3, 100, 175}, {1, 35, 176}, {2, 35, 176}, {3, 153, 177}, {1, 114, 178}, {2, 114, 178}, {1, 71, 179}, {2, 71, 179}, {1, 131, 180}, {2, 131, 180}, {1, 166, 181}, {2, 166, 181}, {1, 26, 182}, {2, 26, 182}, {3, 39, 183}, {3, 130, 184}, {3, 145, 185}, {1, 172, 186}, {2, 172, 186}, {3, 183, 187}, {3, 64, 188}, {3, 140, 189}, {3, 8, 190}, {3, 167, 191}, {3, 186, 192}, {3, 156, 193}, {3, 75, 194}, {3, 26, 195}, {1, 34, 196}, {2, 34, 196}, {3, 98, 197}, {1, 113, 198}, {2, 113, 198}, {3, 23, 199}, {1, 193, 200}, {2, 193, 200}, {3, 193, 201}, {1, 150, 202}, {2, 150, 202}, {3, 141, 203}, {1, 6, 204}, {2, 6, 204}, {1, 100, 205}, {2, 100, 205}, {3, 101, 206}, {1, 27, 207}, {2, 27, 207}, {3, 3, 208}, {3, 123, 209}, {3, 192, 210}, {1, 32, 211}, {2, 32, 211}, {3, 19, 212}, {3, 15, 213}, {1, 78, 214}, {2, 78, 214}, {1, 34, 215}, {2, 34, 215}, {3, 55, 216}, {3, 201, 217}, {3, 53, 218}, {3, 122, 219}, {3, 28, 220}, {3, 104, 221}, {1, 124, 222}, {2, 124, 222}, {1, 76, 223}, {2, 76, 223}, {3, 143, 224}, {3, 36, 225}, {1, 163, 226}, {2, 163, 226}, {3, 5, 227}, {3, 210, 228}, {3, 103, 229}, {3, 40, 230}, {3, 2, 231}, {3, 211, 232}, {1, 93, 233}, {2, 93, 233}, {1, 99, 234}, {2, 99, 234}, {1, 22, 235}, {2, 22, 235}, {3, 137, 236}, {3, 42, 237}, {1, 214, 238}, {2, 214, 238}, {3, 181, 239}, {3, 174, 240}, {1, 68, 241}, {2, 68, 241}, {1, 240, 242}, {2, 240, 242}, {1, 40, 243}, {2, 40, 243}, {3, 120, 244}, {3, 149, 245}, {1, 55, 246}, {2, 55, 246}, {3, 225, 247}, {1, 34, 248}, {2, 34, 248}, {3, 81, 249}, {1, 167, 250}, {2, 167, 250}, {3, 142, 251}, {1, 1, 252}, {2, 1, 252}, {3, 83, 253}, {1, 18, 254}, {2, 18, 254}, {1, 216, 255}, {2, 216, 255}, {1, 251, 256}, {2, 251, 256}, {3, 34, 257}, {3, 58, 258}, {3, 143, 259}, {3, 70, 260}, {1, 193, 261}, {2, 193, 261}, {1, 251, 262}, {2, 251, 262}, {1, 115, 263}, {2, 115, 263}, {1, 123, 264}, {2, 123, 264}, {3, 263, 265}, {1, 122, 266}, {2, 122, 266}, {1, 205, 267}, {2, 205, 267}, {1, 196, 268}, {2, 196, 268}, {1, 148, 269}, {2, 148, 269}, {3, 61, 270}, {3, 134, 271}, {3, 226, 272}, {3, 13, 273}, {3, 102, 274}, {3, 33, 275}, {3, 93, 276}, {3, 177, 277}, {1, 166, 278}, {2, 166, 278}, {3, 39, 279}, {1, 248, 280}, {2, 248, 280}, {1, 129, 281}, {2, 129, 281}, {1, 222, 282}, {2, 222, 282}, {3, 74, 283}, {1, 64, 284}, {2, 64, 284}, {3, 136, 285}, {1, 69, 286}, {2, 69, 286}, {3, 8, 287}, {1, 263, 288}, {2, 263, 288}, {3, 168, 289}, {3, 86, 290}, {1, 135, 291}, {2, 135, 291}, {3, 2, 292}, {1, 75, 293}, {2, 75, 293}, {1, 180, 294}, {2, 180, 294}, {3, 19, 295}, {1, 245, 296}, {2, 245, 296}, {3, 95, 297}, {3, 257, 298}, {3, 141, 299}, {3, 68, 300}, {3, 38, 301}, {1, 12, 302}, {2, 12, 302}, {1, 40, 303}, {2, 40, 303}, {3, 22, 304}, {1, 165, 305}, {2, 165, 305}, {1, 161, 306}, {2, 161, 306}, {3, 128, 307}, {3, 19, 308}, {1, 141, 309}, {2, 141, 309}, {1, 260, 310}, {2, 260, 310}, {3, 91, 311}, {1, 192, 312}, {2, 192, 312}, {3, 149, 313}, {3, 288, 314}, {1, 274, 315}, {2, 274, 315}, {1, 243, 316}, {2, 243, 316}, {1, 248, 317}, {2, 248, 317}, {1, 311, 318}, {2, 311, 318}, {3, 18, 319}, {1, 117, 320}, {2, 117, 320}, {3, 200, 321}, {3, 172, 322}, {3, 282, 323}, {1, 45, 324}, {2, 45, 324}, {1, 174, 325}, {2, 174, 325}, {1, 293, 326}, {2, 293, 326}, {1, 283, 327}, {2, 283, 327}, {1, 111, 328}, {2, 111, 328}, {3, 10, 329}, {3, 36, 330}, {1, 211, 331}, {2, 211, 331}, {1, 72, 332}, {2, 72, 332}, {1, 281, 333}, {2, 281, 333}, {1, 194, 334}, {2, 194, 334}, {3, 39, 335}, {3, 136, 336}, {1, 317, 337}, {2, 317, 337}, {3, 30, 338}, {3, 1, 339}, {1, 51, 340}, {2, 51, 340}, {3, 32, 341}, {3, 90, 342}, {3, 59, 343}, {1, 306, 344}, {2, 306, 344}, {3, 38, 345}, {3, 153, 346}, {1, 331, 347}, {2, 331, 347}, {1, 136, 348}, {2, 136, 348}, {3, 57, 349}, {1, 303, 350}, {2, 303, 350}, {1, 41, 351}, {2, 41, 351}, {1, 125, 352}, {2, 125, 352}, {3, 346, 353}, {3, 195, 354}, {3, 96, 355}, {1, 232, 356}, {2, 232, 356}, {1, 105, 357}, {2, 105, 357}, {1, 8, 358}, {2, 8, 358}, {3, 17, 359}, {3, 348, 360}, {3, 120, 361}, {1, 349, 362}, {2, 349, 362}, {1, 301, 363}, {2, 301, 363}, {3, 199, 364}, {1, 364, 365}, {2, 364, 365}, {3, 34, 366}, {3, 144, 367}, {3, 335, 368}, {1, 245, 369}, {2, 245, 369}, {3, 216, 370}, {3, 187, 371}, {1, 155, 372}, {2, 155, 372}, {3, 62, 373}, {3, 88, 374}, {1, 351, 375}, {2, 351, 375}, {1, 327, 376}, {2, 327, 376}, {1, 5, 377}, {2, 5, 377}, {1, 119, 378}, {2, 119, 378}, {3, 100, 379}, {1, 328, 380}, {2, 328, 380}, {1, 37, 381}, {2, 37, 381}, {3, 223, 382}, {1, 175, 383}, {2, 175, 383}, {1, 292, 384}, {2, 292, 384}, {3, 150, 385}, {3, 145, 386}, {3, 378, 387}, {1, 368, 388}, {2, 368, 388}, {1, 73, 389}, {2, 73, 389}, {3, 197, 390}, {3, 44, 391}, {3, 272, 392}, {1, 129, 393}, {2, 129, 393}, {3, 41, 394}, {3, 315, 395}, {3, 241, 396}, {1, 289, 397}, {2, 289, 397}, {3, 193, 398}, {3, 150, 399}, {3, 39, 400}, {1, 354, 401}, {2, 354, 401}, {3, 207, 402}, {3, 112, 403}, {1, 68, 404}, {2, 68, 404}, {3, 72, 405}, {1, 151, 406}, {2, 151, 406}, {1, 7, 407}, {2, 7, 407}, {1, 324, 408}, {2, 324, 408}, {1, 209, 409}, {2, 209, 409}, {3, 387, 410}, {3, 83, 411}, {1, 7, 412}, {2, 7, 412}, {1, 68, 413}, {2, 68, 413}, {3, 355, 414}, {3, 178, 415}, {3, 9, 416}, {3, 404, 417}, {1, 154, 418}, {2, 154, 418}, {1, 320, 419}, {2, 320, 419}, {1, 220, 420}, {2, 220, 420}, {1, 256, 421}, {2, 256, 421}, {3, 32, 422}, {3, 383, 423}, {3, 225, 424}, {1, 213, 425}, {2, 213, 425}, {3, 385, 426}, {1, 415, 427}, {2, 415, 427}, {1, 361, 428}, {2, 361, 428}, {3, 368, 429}, {3, 170, 430}, {3, 403, 431}, {1, 53, 432}, {2, 53, 432}, {3, 147, 433}, {3, 275, 434}, {1, 426, 435}, {2, 426, 435}, {3, 89, 436}, {1, 225, 437}, {2, 225, 437}, {3, 105, 438}, {3, 433, 439}, {1, 400, 440}, {2, 400, 440}, {1, 29, 441}, {2, 29, 441}, {1, 351, 442}, {2, 351, 442}, {1, 266, 443}, {2, 266, 443}, {3, 245, 444}, {1, 316, 445}, {2, 316, 445}, {1, 180, 446}, {2, 180, 446}, {1, 115, 447}, {2, 115, 447}, {3, 183, 448}, {1, 252, 449}, {2, 252, 449}, {3, 370, 450}, {3, 190, 451}, {3, 165, 452}, {1, 169, 453}, {2, 169, 453}, {1, 140, 454}, {2, 140, 454}, {3, 113, 455}, {1, 357, 456}, {2, 357, 456}, {1, 190, 457}, {2, 190, 457}, {1, 32, 458}, {2, 32, 458}, {3, 156, 459}, {1, 211, 460}, {2, 211, 460}, {1, 422, 461}, {2, 422, 461}, {3, 40, 462}, {1, 293, 463}, {2, 293, 463}, {1, 207, 464}, {2, 207, 464}, {1, 254, 465}, {2, 254, 465}, {1, 183, 466}, {2, 183, 466}, {3, 385, 467}, {3, 38, 468}, {1, 375, 469}, {2, 375, 469}, {3, 3, 470}, {1, 129, 471}, {2, 129, 471}, {3, 128, 472}, {1, 104, 473}, {2, 104, 473}, {3, 124, 474}, {3, 166, 475}, {1, 202, 476}, {2, 202, 476}, {3, 249, 477}, {3, 120, 478}, {3, 205, 479}, {3, 318, 480}, {3, 332, 481}, {1, 392, 482}, {2, 392, 482}, {3, 358, 483}, {1, 412, 484}, {2, 412, 484}, {1, 452, 485}, {2, 452, 485}, {3, 58, 486}, {1, 183, 487}, {2, 183, 487}, {1, 285, 488}, {2, 285, 488}, {1, 367, 489}, {2, 367, 489}, {3, 327, 490}, {1, 357, 491}, {2, 357, 491}, {1, 340, 492}, {2, 340, 492}, {3, 85, 493}, {1, 136, 494}, {2, 136, 494}, {1, 326, 495}, {2, 326, 495}, {3, 328, 496}, {3, 193, 497}, {3, 176, 498}, {3, 148, 499}, {3, 305, 500}, {1, 412, 501}, {2, 412, 501}, {3, 257, 502}, {3, 315, 503}, {1, 331, 504}, {2, 331, 504}, {1, 145, 505}, {2, 145, 505}, {1, 456, 506}, {2, 456, 506}, {3, 418, 507}, {1, 462, 508}, {2, 462, 508}, {1, 25, 509}, {2, 25, 509}, {1, 99, 510}, {2, 99, 510}, {1, 174, 511}, {2, 174, 511}, {1, 506, 512}, {2, 506, 512}, {1, 19, 513}, {2, 19, 513}, {1, 485, 514}, {2, 485, 514}, {3, 167, 515}, {1, 176, 516}, {2, 176, 516}, {3, 230, 517}, {3, 223, 518}, {3, 499, 519}, {3, 474, 520}, {3, 468, 521}, {3, 386, 522}, {1, 164, 523}, {2, 164, 523}, {3, 502, 524}, {3, 41, 525}, {1, 437, 526}, {2, 437, 526}, {3, 377, 527}, {1, 42, 528}, {2, 42, 528}, {1, 388, 529}, {2, 388, 529}, {3, 458, 530}, {3, 459, 531}, {1, 129, 532}, {2, 129, 532}, {3, 516, 533}, {3, 529, 534}, {3, 225, 535}, {1, 285, 536}, {2, 285, 536}, {3, 177, 537}, {3, 475, 538}, {1, 313, 539}, {2, 313, 539}, {3, 237, 540}, {3, 11, 541}, {3, 246, 542}, {3, 433, 543}, {3, 336, 544}, {1, 426, 545}, {2, 426, 545}, {3, 1, 546}, {1, 359, 534}, {1, 222, 531}, {1, 124, 412}, {2, 12, 407}, {3, 250, 543}, {1, 282, 357}, {2, 83, 333}, {1, 9, 371}, {1, 318, 397}, {3, 344, 379}, {2, 151, 533}, {3, 85, 160}, {3, 264, 395}, {2, 144, 539}, {2, 17, 135}, {3, 306, 486}, {1, 159, 326}, {1, 475, 485}, {3, 369, 450}, {1, 170, 266}, {2, 162, 417}, {3, 11, 496}, {2, 230, 318}, {2, 21, 31}, {2, 86, 341}, {2, 220, 422}, {2, 70, 353}, {2, 359, 418}, {1, 409, 504}, {3, 134, 156}, {3, 367, 458}, {1, 31, 278}, {1, 77, 500}, {1, 28, 473}, {1, 355, 395}, {1, 115, 350}, {3, 36, 189}, {1, 157, 294}, {3, 120, 222}, {3, 196, 379}, {3, 58, 66}, {1, 33, 154}, {1, 21, 528}, {3, 235, 499}, {3, 276, 399}, {1, 82, 445}, {3, 200, 212}, {1, 144, 369}, {2, 37, 59}, {3, 302, 478}, {1, 134, 294}, {2, 158, 360}, {3, 1, 125}, {2, 171, 448}, {1, 368, 529}, {3, 90, 107}, {2, 180, 388}, {2, 1, 479}, {1, 114, 365}, {1, 176, 275}, {3, 206, 326}, {3, 15, 258}, {2, 114, 273}, {1, 216, 417}, {1, 257, 284}, {3, 154, 208}, {2, 139, 417}, {3, 108, 132}, {2, 73, 380}, {3, 180, 317}, {2, 48, 513}, {3, 180, 208}, {1, 115, 344}, {3, 85, 537}, {2, 441, 491}, {3, 17, 68}, {3, 218, 260}, {2, 166, 253}, {3, 128, 471}, {3, 433, 435}, {1, 329, 398}, {2, 435, 474}, {3, 59, 518}, {2, 164, 380}, {3, 101, 373}, {3, 229, 532}, {1, 244, 480}, {1, 309, 519}, {3, 247, 489}, {1, 360, 505}, {3, 54, 212}, {3, 190, 263}, {2, 12, 80}, {1, 47, 282}, {2, 79, 203}, {1, 89, 539}, {2, 297, 388}, {3, 129, 488}, {2, 240, 463}, {3, 336, 401}, {1, 108, 256}, {2, 298, 437}, {1, 277, 303}, {2, 2, 447}, {1, 418, 502}, {3, 377, 439}, {1, 69, 396}, {1, 40, 230}, {1, 101, 280}, {1, 50, 75}, {3, 51, 253}, {3, 191, 386}, {1, 231, 466}, {1, 190, 441}, {3, 207, 426}, {3, 74, 474}, {2, 70, 208}, {3, 62, 87}, {1, 467, 498}, {1, 46, 396}, {1, 112, 339}, {3, 132, 387}, {2, 252, 318}, {2, 187, 201}, {2, 394, 499}, {1, 11, 249}, {1, 99, 293}, {1, 280, 416}, {3, 95, 153}, {3, 457, 473}, {3, 91, 269}, {1, 114, 191}, {1, 244, 369}, {3, 187, 257}, {3, 15, 418}, {1, 155, 466}, {3, 234, 434}, {1, 364, 498}, {2, 61, 126}, {3, 132, 418}, {2, 302, 309}, {2, 134, 169}, {1, 36, 191}, {3, 153, 307}, {2, 124, 416}, {1, 1, 480}, {3, 106, 212}, {1, 331, 403}, {3, 268, 311}, {1, 110, 309}, {1, 190, 405}, {1, 54, 65}, {3, 75, 90}, {3, 290, 305}, {3, 474, 512}, {2, 187, 337}, {2, 139, 381}, {3, 44, 47}, {3, 138, 411}, {1, 16, 261}, {1, 54, 455}, {1, 15, 93}, {3, 401, 434}, {1, 55, 345}, {2, 314, 545}, {3, 222, 484}, {2, 83, 94}, {1, 490, 522}, {3, 82, 331}, {3, 73, 196}, {3, 333, 337}, {2, 4, 340}, {1, 12, 41}, {1, 86, 193}, {1, 269, 292}, {1, 86, 508}, {1, 271, 381}, {1, 16, 477}, {2, 202, 412}, {3, 90, 100}, {1, 301, 418}, {1, 114, 222}, {1, 128, 523}, {1, 42, 524}, {2, 48, 404}, {3, 29, 474}, {3, 301, 422}, {2, 309, 499}, {3, 292, 403}, {2, 306, 350}, {3, 122, 298}, {3, 151, 385}, {3, 21, 461}, {3, 176, 478}, {2, 47, 124}, {1, 62, 231}, {3, 279, 510}, {1, 22, 87}, {1, 335, 434}, {2, 123, 162}, {2, 7, 387}, {2, 58, 296}, {2, 231, 464}, {1, 495, 503}, {1, 265, 522}, {2, 279, 493}, {1, 437, 529}, {1, 80, 310}, {1, 346, 521}, {2, 32, 538}, {3, 65, 531}, {1, 225, 461}, {3, 419, 436}, {1, 425, 498}, {3, 170, 403}, {2, 51, 53}, {1, 251, 331}, {3, 269, 314}, {3, 174, 511}, {3, 89, 165}, {1, 115, 232}, {1, 392, 543}, {2, 216, 258}, {2, 175, 418}, {1, 44, 133}, {3, 244, 335}, {1, 24, 298}, {2, 89, 534}, {2, 103, 199}, {3, 345, 387}, {1, 26, 429}, {1, 394, 452}, {3, 127, 214}, {2, 360, 541}, {1, 390, 404}, {2, 112, 211}, {3, 164, 220}, {2, 7, 178}, {2, 85, 202}, {2, 182, 515}, {3, 38, 191}, {3, 302, 535}, {3, 65, 87}, {3, 76, 531}, {3, 45, 426}, {3, 468, 496}, {3, 179, 186}, {3, 175, 483}, {3, 474, 499}, {1, 204, 357}, {1, 288, 518}, {1, 132, 374}, {2, 463, 466}, {2, 10, 295}, {2, 377, 537}, {1, 26, 125}, {2, 216, 244}, {1, 305, 479}, {2, 172, 198}, {1, 54, 501}, {1, 86, 145}, {1, 433, 499}, {3, 62, 534}, {3, 94, 219}, {1, 273, 366}, {2, 91, 391}, {1, 229, 287}, {1, 14, 63}, {2, 159, 172}, {1, 15, 289}, {2, 26, 101}, {1, 221, 228}, {2, 319, 412}, {2, 44, 95}, {3, 321, 396}, {3, 216, 410}, {2, 78, 161}, {1, 138, 151}, {2, 62, 317}, {1, 257, 414}, {2, 210, 506}, {2, 299, 422}, {1, 161, 345}, {3, 95, 356}, {1, 414, 442}, {3, 306, 422}, {3, 86, 413}, {1, 300, 338}, {1, 167, 237}, {2, 388, 470}, {3, 419, 487}, {3, 164, 185}, {3, 404, 472}, {2, 286, 520}, {2, 453, 514}, {1, 426, 500}, {2, 225, 537}, {3, 217, 377}, {2, 427, 512}, {2, 151, 250}, {2, 371, 389}, {1, 88, 180}, {2, 124, 470}, {3, 194, 494}, {1, 40, 448}, {2, 47, 384}, {2, 19, 506}, {3, 10, 508}, {2, 96, 339}, {1, 109, 365}, {2, 9, 74}, {1, 254, 395}, {2, 39, 337}, {3, 41, 516}, {1, 88, 127}, {1, 124, 476}, {1, 32, 254}, {2, 144, 241}, {2, 24, 456}, {2, 387, 496}, {1, 22, 282}, {3, 54, 117}, {2, 309, 426}, {2, 17, 371}, {2, 29, 545}, {3, 83, 295}, {3, 352, 372}, {2, 127, 495}, {2, 96, 420}, {3, 365, 538}, {1, 47, 333}, {3, 210, 254}, {3, 111, 303}, {3, 368, 489}, {3, 173, 446}, {2, 36, 380}, {3, 161, 475}, {1, 183, 252}, {1, 472, 525}, {2, 461, 545}, {3, 177, 240}, {2, 198, 259}, {1, 67, 117}, {1, 187, 219}, {3, 84, 387}, {1, 349, 393}, {1, 28, 496}, {3, 40, 387}, {3, 104, 413}, {2, 102, 106}, {1, 293, 535}, {3, 343, 467}, {3, 176, 483}, {1, 388, 521}, {3, 174, 523}, {3, 177, 346}, {3, 279, 437}, {2, 94, 420}, {3, 146, 538}, {3, 193, 330}, {3, 166, 397}, {3, 4, 286}, {1, 197, 259}, {3, 277, 288}, {1, 288, 531}, {3, 71, 337}, {1, 33, 519}, {3, 157, 484}, {2, 100, 494}, {3, 36, 365}, {1, 250, 341}, {2, 79, 162}, {3, 332, 423}, {2, 180, 319}, {3, 28, 111}, {1, 191, 268}, {1, 226, 301}, {2, 2, 109}, {1, 83, 382}, {2, 91, 347}, {3, 232, 512}, {2, 236, 256}, {2, 253, 447}, {2, 157, 480}, {1, 15, 140}, {2, 31, 128}, {3, 242, 256}, {3, 125, 445}, {1, 280, 362}, {1, 58, 133}, {1, 350, 378}, {3, 166, 263}, {3, 198, 233}, {1, 120, 450}, {1, 32, 508}, {3, 225, 358}, {3, 323, 342}, {3, 54, 384}, {3, 63, 277}, {3, 279, 536}, {1, 59, 302}, {1, 167, 394}, {3, 88, 244}, {1, 94, 100}, {2, 229, 424}, {1, 204, 338}, {3, 136, 409}, {1, 472, 491}, {2, 213, 475}, {1, 93, 214}, {1, 71, 395}, {1, 184, 416}, {3, 112, 465}, {2, 212, 532}, {3, 206, 428}, {2, 49, 271}, {3, 77, 310}, {2, 67, 160}, {2, 55, 136}, {2, 231, 363}, {3, 232, 296}, {1, 51, 293}, {1, 213, 467}, {1, 106, 294}, {3, 26, 528}, {3, 72, 116}, {1, 53, 242}, {3, 83, 430}, {3, 143, 508}, {2, 394, 432}, {3, 246, 428}, {3, 122, 211}, {3, 116, 143}, {1, 330, 506}, {3, 88, 453}, {2, 264, 377}, {1, 48, 433}, {3, 177, 189}, {3, 377, 511}, {3, 16, 82}, {1, 259, 334}, {1, 119, 466}, {3, 155, 184}, {1, 394, 402}, {2, 121, 243}, {1, 52, 68}, {2, 51, 164}, {3, 343, 372}, {1, 110, 349}, {3, 184, 476}, {2, 209, 487}, {2, 61, 375}, {2, 7, 167}, {3, 1, 334}, {1, 54, 229}, {3, 213, 218}, {3, 75, 528}, {3, 317, 521}, {3, 292, 496}, {3, 59, 128}, {2, 57, 299}, {2, 29, 101}, {3, 249, 329}, {3, 261, 527}, {1, 353, 468}, {3, 391, 502}, {3, 2, 472}, {3, 50, 475}, {2, 92, 454}, {2, 139, 247}, {2, 278, 385}, {1, 337, 532}, {2, 54, 527}, {3, 149, 481}, {3, 182, 372}, {2, 149, 161}, {2, 361, 450}, {1, 181, 239}, {2, 51, 510}, {3, 179, 224}, {1, 143, 176}, {3, 95, 126}, {2, 58, 156}, {1, 267, 402}, {1, 95, 243}, {1, 296, 330}, {1, 80, 350}, {2, 199, 258}, {2, 75, 89}, {1, 88, 360}, {1, 78, 317}, {2, 25, 384}, {3, 72, 523}, {1, 160, 437}, {2, 322, 395}, {1, 212, 514}, {1, 107, 500}, {2, 495, 498}, {1, 138, 413}, {2, 118, 180}, {1, 348, 534}, {1, 168, 175}, {1, 218, 466}, {2, 264, 458}, {1, 254, 345}, {2, 24, 303}, {3, 122, 462}, {1, 29, 72}, {1, 353, 498}, {3, 351, 522}, {3, 131, 173}, {2, 124, 512}, {3, 233, 543}, {3, 370, 514}, {2, 269, 377}, {3, 101, 174}, {1, 234, 459}, {3, 43, 138}, {1, 336, 478}, {2, 6, 402}, {1, 210, 281}, {1, 65, 329}, {1, 44, 223}, {2, 242, 301}, {2, 194, 471}, {2, 69, 436}, {3, 51, 240}, {2, 310, 320}, {1, 223, 425}, {3, 156, 502}, {3, 15, 374}, {2, 48, 334}, {2, 207, 422}, {2, 12, 275}, {1, 118, 178}, {1, 235, 366}, {1, 392, 405}, {2, 407, 527}, {1, 271, 400}, {2, 313, 432}, {3, 431, 539}, {3, 262, 460}, {1, 461, 536}, {1, 496, 541}, {1, 73, 435}, {1, 133, 320}, {2, 218, 441}, {1, 105, 465}, {1, 62, 462}, {1, 311, 349}, {3, 426, 477}, {3, 71, 248}, {2, 211, 297}, {3, 42, 461}, {1, 254, 312}, {3, 396, 418}, {3, 159, 417}, {1, 128, 249}, {1, 159, 286}, {1, 195, 324}, {1, 13, 17}, {1, 168, 312}, {2, 59, 291}, {3, 305, 348}, {2, 6, 315}, {3, 274, 462}, {2, 215, 510}, {3, 385, 437}, {2, 24, 533}, {3, 39, 247}, {1, 264, 388}, {2, 129, 351}, {1, 412, 433}, {1, 485, 493}, {2, 159, 429}, {1, 128, 145}, {1, 5, 192}, {2, 273, 458}, {3, 81, 377}, {2, 161, 429}, {2, 141, 367}, {3, 239, 533}, {2, 39, 341}, {3, 214, 402}, {3, 253, 494}, {2, 60, 283}, {2, 394, 467}, {1, 243, 246}, {2, 253, 495}, {2, 216, 506}, {3, 405, 449}, {3, 517, 527}, {3, 16, 189}, {1, 472, 511}, {1, 15, 405}, {3, 88, 129}, {3, 311, 542}, {2, 123, 285}, {2, 214, 232}, {2, 176, 335}, {2, 415, 456}, {1, 227, 431}, {1, 139, 424}, {3, 117, 274}, {2, 137, 233}, {2, 390, 454}, {2, 233, 493}, {3, 170, 491}, {1, 405, 519}, {2, 86, 473}, {3, 204, 257}, {2, 237, 428}, {1, 31, 421}, {2, 251, 452}, {1, 241, 348}, {3, 24, 26}, {2, 388, 538}, {2, 151, 171}, {1, 10, 253}, {2, 416, 492}, {3, 175, 484}, {3, 155, 229}, {3, 212, 357}, {1, 143, 298}, {1, 4, 364}, {2, 331, 436}, {3, 122, 444}, {1, 120, 217}, {2, 58, 521}, {2, 308, 368}, {3, 278, 314}, {2, 3, 312}, {1, 16, 202}, {1, 21, 293}, {1, 60, 75}, {2, 154, 449}, {3, 111, 171}, {3, 408, 455}, {1, 142, 411}, {3, 341, 386}, {3, 92, 233}, {3, 206, 422}, {2, 253, 400}, {1, 124, 162}, {2, 149, 510}, {1, 163, 281}, {3, 428, 540}, {1, 99, 368}, {3, 106, 386}, {1, 290, 460}, {2, 85, 401}, {2, 94, 262}, {3, 190, 400}, {3, 64, 470}, {2, 502, 510}, {1, 85, 522}, {3, 156, 295}, {1, 142, 279}, {1, 111, 286}, {2, 169, 409}, {1, 245, 304}, {2, 531, 542}, {1, 18, 500}, {3, 80, 283}, {2, 96, 247}, {1, 42, 118}, {2, 213, 364}, {1, 225, 353}, {3, 383, 535}, {2, 60, 528}, {2, 351, 446}, {2, 6, 144}, {3, 4, 326}, {3, 268, 389}, {2, 44, 302}, {2, 159, 387}, {1, 207, 288}, {1, 212, 513}, {2, 52, 467}, {1, 307, 479}, {2, 279, 495}, {3, 287, 355}, {1, 428, 437}, {2, 222, 495}, {3, 202, 512}, {2, 314, 527}, {3, 28, 88}, {3, 25, 131}, {2, 140, 491}, {2, 12, 380}, {3, 367, 457}, {1, 487, 488}, {1, 100, 251}, {1, 35, 491}, {3, 139, 232}, {1, 71, 477}, {3, 24, 335}, {2, 222, 307}, {2, 128, 199}, {3, 43, 337}, {1, 467, 510}, {2, 75, 116}, {2, 71, 387}, {2, 43, 541}, {1, 149, 187}, {3, 193, 389}, {2, 145, 393}, {2, 106, 369}, {2, 191, 230}, {3, 47, 313}, {2, 155, 341}, {2, 154, 293}, {2, 1, 134}, {2, 326, 373}, {2, 233, 256}, {3, 385, 404}, {2, 129, 189}, {1, 14, 331}, {2, 426, 505}, {1, 207, 505}, {1, 157, 314}, {3, 44, 249}, {3, 292, 304}, {1, 13, 536}, {2, 354, 527}, {1, 275, 324}, {1, 145, 293}, {2, 23, 168}, {1, 23, 541}, {1, 79, 180}, {3, 61, 127}, {3, 253, 385}, {2, 286, 511}, {3, 230, 274}, {3, 209, 286}, {1, 57, 462}, {1, 98, 245}, {1, 1, 350}, {1, 212, 430}, {2, 127, 196}, {2, 89, 450}, {3, 397, 432}, {2, 281, 462}, {2, 334, 363}, {1, 271, 339}, {1, 109, 364}, {2, 199, 319}, {1, 44, 267}, {2, 228, 376}, {1, 11, 305}, {2, 264, 367}, {1, 218, 338}, {1, 6, 364}, {1, 183, 328}, {2, 49, 344}, {3, 74, 327}, {2, 68, 87}, {3, 334, 501}, {1, 149, 504}, {2, 133, 339}, {3, 210, 323}, {1, 201, 218}, {2, 258, 346}, {1, 3, 453}, {3, 375, 390}, {2, 9, 341}, {2, 440, 462}, {2, 36, 472}, {3, 92, 238}, {2, 211, 248}, {2, 101, 142}, {3, 113, 451}, {1, 73, 212}, {3, 79, 383}, {2, 232, 429}, {3, 386, 455}, {2, 315, 350}, {1, 378, 540}, {2, 290, 326}, {1, 144, 326}, {3, 128, 482}, {3, 59, 502}, {2, 20, 315}, {1, 113, 460}, {3, 5, 429}, {2, 318, 483}, {2, 433, 506}, {3, 89, 164}, {3, 116, 317}, {3, 3, 76}, {1, 259, 468}, {2, 72, 386}, {3, 28, 237}, {1, 97, 161}, {2, 272, 289}, {3, 334, 516}, {3, 256, 413}, {3, 47, 416}, {2, 205, 355}, {2, 303, 329}, {1, 76, 250}, {1, 146, 482}, {3, 105, 270}, {1, 325, 421}, {3, 45, 299}, {2, 49, 197}, {2, 92, 119}, {3, 25, 473}, {1, 438, 450}, {3, 82, 246}, {1, 126, 333}, {2, 83, 318}, {1, 183, 526}, {1, 429, 534}, {2, 134, 257}, {3, 161, 282}, {2, 259, 442}, {1, 7, 510}, {3, 142, 471}, {3, 211, 311}, {3, 27, 186}, {2, 62, 468}, {2, 258, 398}, {3, 150, 167}, {2, 110, 134}, {1, 261, 382}, {2, 14, 248}, {2, 179, 354}, {1, 92, 383}, {1, 272, 527}, {3, 270, 446}, {1, 328, 395}, {3, 104, 480}, {1, 118, 171}, {3, 276, 404}, {2, 218, 491}, {3, 172, 472}, {3, 97, 168}, {3, 94, 224}, {1, 51, 160}, {1, 117, 351}, {2, 291, 347}, {2, 150, 174}, {3, 98, 430}, {1, 83, 455}, {3, 165, 506}, {3, 114, 128}, {2, 19, 429}, {1, 231, 540}, {1, 179, 331}, {1, 164, 532}, {2, 215, 225}, {1, 56, 490}, {3, 470, 536}, {1, 17, 385}, {2, 154, 296}, {1, 184, 527}, {2, 28, 467}, {2, 4, 148}, {3, 24, 437}, {1, 114, 495}, {3, 13, 426}, {2, 321, 543}, {3, 104, 350}, {2, 45, 522}, {3, 321, 500}, {1, 10, 68}, {3, 41, 248}, {1, 39, 407}, {1, 216, 421}, {1, 238, 385}, {1, 199, 314}, {3, 95, 407}, {1, 31, 331}, {2, 196, 386}, {2, 263, 546}, {3, 186, 224}, {3, 74, 328}, {1, 204, 402}, {2, 32, 235}, {1, 322, 462}, {1, 270, 291}, {1, 54, 523}, {1, 185, 416}, {2, 127, 534}, {2, 32, 41}, {2, 266, 377}, {2, 377, 422}, {3, 11, 470}, {1, 183, 301}, {3, 7, 179}, {1, 354, 451}, {3, 400, 508}, {2, 312, 543}, {2, 251, 527}, {3, 170, 191}, {3, 360, 537}, {3, 393, 506}, {1, 150, 480}, {2, 77, 106}, {3, 219, 540}, {2, 64, 221}, {2, 116, 242}, {3, 60, 322}, {2, 300, 340}, {1, 12, 15}, {1, 506, 530}, {1, 91, 349}, {2, 491, 543}, {2, 100, 493}, {3, 101, 298}, {1, 262, 483}, {3, 194, 441}, {1, 184, 467}, {2, 84, 396}, {2, 245, 322}, {1, 90, 529}, {1, 111, 501}, {1, 299, 394}, {2, 194, 504}, {2, 70, 139}, {2, 167, 320}, {2, 325, 445}, {2, 231, 453}, {3, 302, 320}, {2, 1, 324}, {1, 112, 123}, {1, 6, 294}, {2, 192, 382}, {3, 89, 118}, {1, 157, 509}, {3, 42, 406}, {3, 207, 212}, {2, 68, 117}, {3, 486, 540}, {1, 109, 387}, {2, 33, 448}, {2, 17, 309}, {2, 418, 445}, {3, 179, 203}, {2, 22, 278}, {2, 155, 486}, {1, 91, 424}, {3, 7, 233}, {3, 245, 275}, {2, 3, 438}, {2, 290, 337}, {1, 156, 424}, {2, 194, 370}, {3, 450, 482}, {1, 334, 372}, {2, 73, 437}, {2, 91, 398}, {1, 109, 150}, {2, 194, 453}, {2, 9, 545}, {3, 436, 442}, {3, 472, 532}, {1, 80, 499}, {3, 159, 397}, {2, 345, 372}, {3, 392, 535}, {1, 285, 297}, {3, 25, 300}, {2, 508, 521}, {1, 110, 395}, {3, 140, 313}, {1, 131, 425}, {2, 165, 486}, {1, 187, 316}, {3, 339, 439}, {1, 46, 215}, {2, 38, 221}, {2, 426, 520}, {1, 269, 449}, {1, 309, 531}, {1, 10, 217}, {1, 291, 372}, {2, 8, 271}, {1, 204, 297}, {1, 188, 370}, {1, 169, 215}, {1, 158, 246}, {2, 21, 91}, {1, 165, 253}, {2, 524, 543}, {1, 443, 469}, {1, 113, 193}, {3, 182, 297}, {2, 147, 264}, {3, 222, 228}, {3, 4, 118}, {1, 10, 118}, {2, 315, 484}, {1, 259, 536}, {3, 118, 222}, {1, 107, 318}, {2, 87, 315}, {3, 53, 328}, {2, 150, 158}, {1, 179, 537}, {2, 53, 409}, {3, 101, 512}, {3, 27, 145}, {2, 269, 288}, {3, 333, 538}, {2, 351, 390}, {3, 83, 448}, {2, 261, 368}, {3, 97, 297}, {2, 140, 247}, {2, 145, 423}, {3, 364, 460}, {3, 64, 190}, {3, 473, 494}, {1, 317, 346}, {3, 143, 285}, {1, 73, 240}, {3, 245, 537}, {3, 295, 449}, {1, 112, 436}, {2, 295, 414}, {3, 116, 429}, {2, 68, 93}, {2, 158, 526}, {1, 496, 545}, {3, 207, 225}, {2, 231, 432}, {2, 137, 204}, {2, 410, 492}, {3, 139, 364}, {3, 258, 262}, {3, 316, 358}, {3, 131, 329}, {2, 24, 122}, {3, 448, 471}, {1, 86, 116}, {3, 25, 529}, {3, 210, 517}, {1, 99, 517}, {1, 135, 346}, {2, 80, 333}, {2, 156, 403}, {3, 231, 293}, {1, 26, 211}, {3, 5, 126}, {1, 67, 348}, {3, 78, 331}, {1, 121, 529}, {1, 479, 533}, {2, 259, 323}, {2, 271, 360}, {1, 346, 530}, {2, 137, 264}, {1, 56, 443}, {3, 25, 72}, {2, 347, 411}, {3, 218, 347}, {2, 33, 434}, {1, 183, 223}, {2, 132, 251}, {2, 52, 85}, {1, 186, 255}, {2, 81, 86}, {3, 520, 531}, {1, 10, 457}, {1, 74, 173}, {3, 245, 364}, {3, 312, 378}, {3, 27, 425}, {2, 97, 485}, {3, 39, 418}, {3, 106, 393}, {3, 46, 399}, {1, 77, 417}, {2, 55, 197}, {3, 142, 168}, {1, 345, 420}, {1, 266, 430}, {1, 12, 374}, {2, 123, 521}, {1, 45, 532}, {3, 372, 381}, {3, 22, 535}, {2, 149, 392}, {2, 173, 289}, {1, 90, 448}, {3, 125, 176}, {1, 396, 445}, {3, 109, 353}, {3, 342, 485}, {3, 247, 504}, {2, 210, 282}, {3, 12, 493}, {2, 230, 380}, {2, 253, 378}, {1, 74, 198}, {1, 145, 455}, {2, 155, 301}, {1, 69, 147}, {2, 453, 468}, {2, 483, 486}, {2, 395, 401}, {1, 232, 300}, {2, 235, 461}, {1, 69, 186}, {3, 337, 403}, {2, 163, 477}, {2, 423, 503}, {3, 244, 478}, {1, 15, 30}, {2, 183, 230}, {1, 79, 302}, {1, 354, 357}, {2, 175, 384}, {1, 218, 433}, {3, 272, 538}, {2, 119, 544}, {2, 327, 539}, {3, 152, 183}, {2, 45, 196}, {2, 112, 503}, {1, 452, 498}, {2, 417, 523}, {1, 104, 543}, {1, 158, 335}, {1, 99, 531}, {2, 141, 512}, {3, 220, 282}, {2, 307, 436}, {1, 2, 98}, {3, 7, 152}, {1, 21, 225}, {3, 220, 421}, {1, 280, 323}, {1, 12, 171}, {3, 274, 460}, {2, 195, 241}, {1, 108, 197}, {3, 325, 373}, {3, 148, 467}, {1, 28, 71}, {3, 4, 199}, {2, 83, 524}, {2, 87, 440}, {2, 130, 436}, {1, 150, 233}, {2, 302, 544}, {2, 112, 440}, {3, 305, 352}, {2, 233, 473}, {2, 323, 391}, {1, 14, 206}, {3, 147, 532}, {1, 114, 434}, {2, 468, 500}, {1, 22, 529}, {1, 373, 482}, {2, 125, 379}, {1, 64, 307}, {2, 78, 236}, {3, 102, 264}, {2, 13, 62}, {3, 78, 466}, {1, 252, 390}, {3, 330, 377}, {3, 370, 502}, {2, 26, 543}, {1, 477, 514}, {2, 115, 204}, {2, 16, 192}, {1, 237, 435}, {3, 83, 190}, {2, 71, 74}, {3, 2, 319}, {1, 76, 185}, {3, 151, 273}, {1, 60, 476}, {2, 74, 353}, {1, 122, 382}, {2, 403, 430}, {3, 426, 446}, {1, 479, 505}, {2, 49, 538}, {1, 34, 243}, {3, 61, 321}, {3, 20, 131}, {2, 340, 476}, {2, 392, 458}, {2, 178, 388}, {3, 293, 424}, {1, 158, 502}, {2, 139, 257}, {1, 50, 289}, {3, 128, 133}, {3, 310, 339}, {2, 19, 196}, {3, 31, 440}, {1, 45, 188}, {2, 91, 281}, {1, 5, 428}, {1, 167, 456}, {3, 419, 473}, {2, 7, 507}, {1, 295, 465}, {2, 63, 113}, {2, 126, 149}, {2, 102, 211}, {1, 20, 180}, {2, 81, 454}, {3, 194, 237}, {1, 157, 536}, {2, 167, 331}, {3, 279, 334}, {3, 52, 494}, {1, 78, 524}, {1, 314, 422}, {2, 388, 396}, {3, 382, 401}, {1, 81, 138}, {2, 93, 353}, {2, 43, 61}, {1, 8, 286}, {3, 9, 71}, {2, 275, 457}, {3, 93, 353}, {2, 109, 185}, {1, 87, 223}, {1, 315, 481}, {2, 217, 405}, {1, 61, 497}, {1, 165, 219}, {1, 382, 516}, {3, 138, 491}, {1, 419, 420}, {3, 104, 357}, {1, 403, 471}, {1, 63, 113}, {2, 247, 525}, {1, 328, 473}, {3, 139, 394}, {2, 299, 539}, {3, 259, 270}, {2, 70, 534}, {3, 25, 516}, {2, 289, 343}, {1, 41, 318}, {3, 42, 493}, {1, 35, 494}, {3, 206, 308}, {2, 120, 475}, {1, 150, 488}, {1, 191, 491}, {1, 167, 451}, {2, 277, 386}, {3, 57, 539}, {3, 50, 79}, {3, 82, 343}, {2, 213, 278}, {3, 1, 512}, {1, 266, 284}, {2, 29, 380}, {1, 143, 185}, {2, 152, 292}, {3, 92, 200}, {3, 307, 316}, {1, 462, 513}, {2, 37, 374}, {3, 161, 314}, {1, 36, 484}, {1, 75, 472}, {2, 31, 483}, {3, 352, 540}, {2, 335, 510}, {1, 111, 465}, {1, 6, 509}, {3, 292, 322}, {1, 116, 349}, {3, 303, 425}, {2, 162, 388}, {3, 380, 485}, {3, 448, 500}, {3, 214, 489}, {3, 156, 433}, {3, 178, 448}, {3, 145, 169}, {1, 3, 83}, {2, 231, 504}, {3, 392, 495}, {3, 201, 347}, {2, 131, 546}, {1, 209, 481}, {2, 17, 83}, {3, 297, 514}, {1, 486, 512}, {3, 161, 401}, {1, 288, 451}, {1, 109, 273}, {3, 85, 414}, {3, 70, 525}, {3, 423, 465}, {1, 162, 235}, {3, 43, 201}, {2, 175, 238}, {3, 150, 347}, {1, 414, 532}, {3, 172, 292}, {2, 396, 533}, {1, 33, 495}, {3, 311, 474}, {1, 468, 545}, {1, 239, 449}, {2, 45, 331}, {3, 187, 527}, {3, 472, 521}, {1, 93, 149}, {1, 307, 326}, {2, 89, 324}, {3, 391, 546}, {1, 416, 495}, {1, 102, 545}, {2, 206, 498}, {2, 315, 465}, {2, 338, 381}, {1, 289, 360}, {3, 194, 414}, {2, 34, 128}, {3, 516, 540}, {2, 98, 396}, {3, 328, 449}, {2, 134, 305}, {1, 185, 447}, {3, 92, 494}, {2, 194, 521}, {1, 438, 520}, {1, 121, 407}, {1, 153, 315}, {1, 67, 93}, {1, 96, 158}, {3, 330, 402}, {2, 409, 418}, {1, 57, 96}, {1, 216, 312}, {1, 292, 531}, {1, 123, 236}, {2, 154, 298}, {1, 198, 302}, {3, 53, 75}, {2, 111, 195}, {1, 259, 421}, {1, 125, 245}, {3, 88, 122}, {2, 408, 409}, {2, 32, 201}, {2, 32, 56}, {1, 298, 484}, {2, 188, 475}, {2, 200, 538}, {3, 180, 282}, {2, 54, 360}, {3, 147, 514}, {3, 205, 429}, {3, 49, 85}, {2, 189, 418}, {3, 32, 464}, {2, 48, 501}, {3, 257, 354}, {3, 127, 508}, {1, 36, 58}, {2, 407, 481}, {2, 317, 524}, {2, 178, 424}, {1, 171, 494}, {2, 182, 419}, {3, 88, 223}, {3, 192, 433}, {1, 118, 209}, {2, 112, 280}, {1, 22, 428}, {3, 74, 301}, {1, 302, 364}, {2, 131, 409}, {2, 149, 311}, {3, 355, 422}, {2, 272, 505}, {1, 363, 510}, {3, 48, 176}, {1, 358, 534}, {2, 91, 393}, {3, 45, 472}, {2, 347, 421}, {3, 85, 296}, {2, 423, 514}, {3, 121, 365}, {3, 150, 324}, {1, 187, 236}, {2, 219, 530}, {2, 415, 537}, {3, 16, 337}, {2, 201, 209}, {2, 3, 148}, {3, 116, 430}, {1, 58, 258}, {1, 105, 307}, {1, 20, 321}, {1, 430, 464}, {1, 171, 342}, {1, 73, 330}, {2, 280, 454}, {2, 359, 403}, {1, 160, 348}, {1, 22, 247}, {2, 489, 503}, {2, 40, 388}, {2, 219, 379}, {2, 492, 516}, {1, 42, 117}, {3, 450, 470}, {3, 53, 506}, {2, 89, 187}, {2, 47, 243}, {2, 205, 207}, {1, 74, 474}, {2, 264, 359}, {1, 330, 382}, {2, 442, 531}, {1, 103, 224}, {1, 91, 454}, {3, 221, 278}, {2, 133, 457}, {1, 258, 336}, {3, 394, 412}, {1, 141, 527}, {3, 54, 381}, {2, 89, 122}, {1, 314, 502}, {1, 269, 521}, {1, 227, 242}, {2, 55, 59}, {3, 89, 117}, {3, 256, 475}, {2, 105, 345}, {1, 49, 377}, {3, 495, 525}, {2, 533, 545}, {2, 111, 508}, {3, 109, 449}, {1, 94, 358}, {3, 18, 246}, {2, 265, 382}, {3, 200, 330}, {3, 106, 396}, {3, 54, 118}, {3, 423, 535}, {1, 134, 214}, {2, 241, 296}, {3, 60, 427}, {2, 44, 426}, {2, 312, 422}, {3, 182, 290}, {1, 57, 279}, {2, 80, 228}, {2, 233, 436}, {1, 248, 457}, {2, 56, 348}, {2, 409, 487}, {1, 72, 268}, {1, 97, 436}, {2, 136, 347}, {3, 297, 490}, {1, 373, 495}, {1, 352, 451}, {3, 22, 254}, {1, 135, 164}, {3, 28, 501}, {3, 154, 402}, {3, 39, 192}, {1, 19, 73}, {3, 351, 358}, {2, 66, 229}, {1, 226, 311}, {2, 8, 343}, {1, 110, 485}, {2, 161, 376}, {3, 3, 263}, {3, 422, 497}, {1, 92, 447}, {1, 201, 402}, {3, 427, 477}, {3, 37, 501}, {2, 470, 486}, {2, 236, 546}, {2, 45, 399}, {3, 126, 267}, {1, 179, 205}, {1, 254, 430}, {1, 136, 277}, {3, 96, 191}, {3, 79, 226}, {3, 13, 321}, {2, 230, 514}, {1, 408, 443}, {2, 49, 156}, {1, 194, 355}, {2, 469, 492}, {3, 165, 369}, {2, 231, 413}, {2, 428, 515}, {1, 340, 508}, {1, 317, 339}, {1, 148, 487}, {1, 146, 531}, {3, 29, 116}, {1, 82, 220}, {3, 115, 253}, {1, 181, 367}, {3, 526, 534}, {3, 243, 392}, {1, 130, 201}, {1, 76, 284}, {3, 185, 414}, {1, 179, 196}, {3, 388, 490}, {3, 194, 511}, {2, 8, 532}, {2, 284, 489}, {1, 117, 441}, {2, 207, 383}, {2, 496, 518}, {1, 88, 144}, {2, 539, 544}, {3, 38, 327}, {1, 140, 357}, {3, 30, 246}, {2, 290, 523}, {3, 280, 348}, {1, 60, 455}, {2, 186, 374}, {3, 314, 338}, {1, 329, 537}, {1, 161, 192}, {3, 185, 288}, {3, 174, 470}, {2, 397, 486}, {3, 343, 413}, {2, 305, 333}, {1, 443, 541}, {2, 51, 54}, {3, 149, 460}, {1, 100, 393}, {1, 82, 533}, {1, 219, 543}, {1, 345, 493}, {3, 34, 312}, {3, 360, 511}, {3, 66, 432}, {2, 247, 289}, {1, 5, 512}, {1, 496, 497}, {3, 309, 324}, {3, 30, 397}, {1, 376, 447}, {1, 301, 496}, {1, 289, 408}, {1, 260, 499}, {1, 486, 509}, {3, 72, 110}, {3, 102, 174}, {2, 263, 335}, {2, 85, 323}, {2, 284, 363}, {1, 205, 250}, {2, 255, 373}, {3, 80, 241}, {1, 395, 456}, {2, 127, 233}, {3, 63, 258}, {1, 49, 369}, {2, 275, 293}, {2, 34, 349}, {2, 241, 454}, {1, 113, 128}, {2, 143, 447}, {2, 204, 536}, {2, 367, 443}, {2, 37, 41}, {3, 32, 57}, {1, 217, 289}, {1, 48, 350}, {3, 17, 196}, {2, 28, 193}, {3, 135, 477}, {3, 224, 349}, {3, 276, 373}, {3, 384, 538}, {3, 59, 370}, {3, 260, 439}, {3, 127, 514}, {2, 194, 530}, {1, 148, 255}, {3, 425, 530}, {2, 80, 441}, {1, 242, 431}, {2, 246, 448}, {1, 129, 450}, {1, 237, 300}, {3, 379, 506}, {2, 141, 343}, {3, 436, 483}, {2, 427, 536}, {1, 381, 489}, {2, 37, 148}, {2, 166, 180}, {2, 489, 526}, {2, 49, 496}, {1, 202, 492}, {2, 187, 204}, {1, 69, 308}, {1, 215, 343}, {1, 440, 499}, {2, 279, 386}, {2, 127, 393}, {1, 242, 469}, {1, 153, 330}, {3, 328, 362}, {1, 1, 185}, {2, 468, 498}, {1, 177, 472}, {3, 259, 399}, {3, 117, 252}, {3, 205, 320}, {3, 415, 445}, {3, 216, 403}, {1, 308, 433}, {3, 35, 118}, {2, 1, 457}, {2, 41, 338}, {1, 409, 522}, {1, 177, 451}, {3, 206, 520}, {1, 65, 212}, {1, 65, 249}, {2, 466, 487}, {3, 384, 465}, {2, 207, 229}, {1, 100, 116}, {2, 432, 435}, {1, 309, 375}, {3, 174, 420}, {3, 17, 373}, {2, 217, 385}, {2, 75, 376}, {1, 238, 391}, {1, 198, 258}, {1, 133, 485}, {1, 247, 392}, {2, 101, 293}, {1, 284, 511}, {1, 127, 335}, {2, 144, 413}, {1, 64, 156}, {2, 265, 437}, {2, 300, 329}, {2, 193, 214}, {1, 296, 517}, {2, 365, 368}, {2, 375, 473}, {1, 362, 392}, {3, 250, 326}, {3, 95, 435}, {1, 37, 319}, {3, 19, 476}, {1, 97, 530}, {1, 437, 515}, {3, 442, 498}, {2, 51, 543}, {3, 264, 424}, {2, 48, 315}, {1, 425, 478}, {2, 298, 352}, {1, 292, 395}, {3, 191, 259}, {2, 190, 480}, {1, 161, 403}, {2, 173, 307}};

        long begin = System.currentTimeMillis();
        System.err.print(maxNumEdgesToRemove(546, arr));
        long end = System.currentTimeMillis();
        System.err.println("total: " + (end - begin) + "ms.");
    }

    public int numEquivDominoPairs(int[][] dominoes) {
        int result = 0;
        Map<String, Integer> m = new HashMap<>();

        for (int[] i : dominoes) {
            String tmp = "";
            for (int j = 0; j < i.length; j++) {
                tmp += i[j];
            }

            char[] tmpCharArr = tmp.toCharArray();
            List<Character> tmpCharList = new LinkedList<>();
            for (char c : tmpCharArr) {
                tmpCharList.add(c);
            }
            Collections.reverse(tmpCharList);
            StringBuilder b = new StringBuilder();
            for (Character c : tmpCharList) {
                b.append(c);
            }
            String tmpReverse = b.toString();
            String dictOrderBiggerForHash = tmp.compareTo(tmpReverse) > 0 ? tmp : tmpReverse;

            if (m.containsKey(dictOrderBiggerForHash)) {
                m.put(dictOrderBiggerForHash, m.get(dictOrderBiggerForHash) + 1);
            } else {
                m.put(dictOrderBiggerForHash, 1);
            }
        }
        for (String s : m.keySet()) {
            int tmp = m.get(s);
            if (tmp != 1) {
                result += tmp * (tmp - 1) / 2;
            }
        }
        return result;
    }

    public int maximumProduct(int[] nums) {

        int n = nums.length;

        if (n == 3) {
            return nums[0] * nums[1] * nums[2];
        }

        Arrays.sort(nums);

        if (nums[n - 1] < 0) {
            return nums[n - 1] * nums[n - 2] * nums[n - 3];
        }

        if (nums[0] < 0 && nums[1] < 0) {
            if (nums[0] * nums[1] > nums[n - 2] * nums[n - 3]) {
                return nums[n - 1] * nums[0] * nums[1];
            } else {
                return nums[n - 1] * nums[n - 2] * nums[n - 3];
            }
        }
        return nums[n - 1] * nums[n - 2] * nums[n - 3];
    }

    public static List<Boolean> prefixesDivBy5(int[] A) {
        int n = A.length;
        List<Boolean> result = new ArrayList<>(Collections.nCopies(n, false));
        int p = 0;
        for (int i = 0; i < n; i++) {
            p = ((p << 1) | A[i]) % 5;
            if (p == 0) result.set(i, true);
        }
        return result;
    }

    public String smallestStringWithSwaps(String s, List<List<Integer>> pairs) {
        if (pairs.size() == 0) return s;
        char[] sChar = s.toCharArray();
        DisjointSetUnion ufs = new DisjointSetUnion();
        for (List<Integer> li : pairs) {
            ufs.add(li.get(0));
            ufs.add(li.get(1));
            ufs.merge(li.get(0), li.get(1));
        }

        Map<Integer, Set<Integer>> groups = ufs.getAllGroups();


        for (int i : groups.keySet()) {
            Set<Integer> gSet = groups.get(i);
            List<Integer> g = new ArrayList<>(gSet);
            g = g.stream().sorted().collect(Collectors.toList());
            char[] ca = new char[g.size()];
            for (int j = 0; j < g.size(); j++) {
                ca[j] = s.charAt(g.get(j));
            }
            Arrays.sort(ca);
            for (int j = 0; j < g.size(); j++) {
                sChar[g.get(j)] = ca[j];
            }
        }
        return new String(sChar);
    }

    public static int regionsBySlashes(String[] grid) {
        final int n = grid.length;
        Set<Integer> pointSet = new HashSet<>();
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[i].length(); j++) {
                if (grid[i].charAt(j) == '/') {
                    pointSet.add((3 * i) * (3 * n + 1) + (3 * (j + 1)));
                    pointSet.add((3 * i + 1) * (3 * n + 1) + (3 * (j + 1) - 1));
                    pointSet.add((3 * i + 2) * (3 * n + 1) + (3 * (j + 1) - 2));
                    pointSet.add((3 * i + 3) * (3 * n + 1) + (3 * (j + 1) - 3));
                } else if (grid[i].charAt(j) == '\\') {
                    pointSet.add((3 * i) * (3 * n + 1) + (3 * j));
                    pointSet.add((3 * i + 1) * (3 * n + 1) + (3 * j + 1));
                    pointSet.add((3 * i + 2) * (3 * n + 1) + (3 * j + 2));
                    pointSet.add((3 * i + 3) * (3 * n + 1) + (3 * j + 3));
                }
            }
        }

        DisjointSetUnion dsu = new DisjointSetUnion();
        for (int i = 0; i < 3 * n + 1; i++) {
            for (int j = 0; j < 3 * n + 1; j++) {
                // 若当前点不构成边
                if (!pointSet.contains(i * (3 * n + 1) + j)) {
                    dsu.add(i * (3 * n + 1) + j);
                    if (i < (3 * n)) {
                        if (!pointSet.contains((i + 1) * (3 * n + 1) + j)) {
                            dsu.add((i + 1) * (3 * n + 1) + j);
                            dsu.merge(i * (3 * n + 1) + j, (i + 1) * (3 * n + 1) + j);
                        }
                    }
                    if (j < (3 * n)) {
                        if (!pointSet.contains(i * (3 * n + 1) + j + 1)) {
                            dsu.add(i * (3 * n + 1) + (j + 1));
                            dsu.merge(i * (3 * n + 1) + j, i * (3 * n + 1) + (j + 1));
                        }
                    }
                }
            }
        }

        int i = dsu.getNumOfGroups();

        return i;
    }


    // 1. 对alice&bob, 加入所有的III类边, 并找出里面可能的冗余边(merge返回false的情况), 记录冗余边数
    // 2. 对alice, 加入所有I类边, 记录冗余边。若最后dsu中有大于一个连通分量, 或dsu的总点数!=n, 直接返回-1
    // 3. 对bob同alice
    // 4. 返回冗余边总数

    public static int maxNumEdgesToRemove(int n, int[][] edges) {
        DisjointSetUnion alice = new DisjointSetUnion();
        DisjointSetUnion bob = new DisjointSetUnion();

        int aliceRedundancy = 0;
        int bobRedundancy = 0;
        int typeIiiRedundancy = 0;

        for (int[] i : edges) {
            if (i[0] == 3) {
                alice.add(i[1]);
                alice.add(i[2]);
                bob.add(i[1]);
                bob.add(i[2]);
                if (!alice.merge(i[1], i[2])) typeIiiRedundancy++;
                bob.merge(i[1], i[2]);
            }
        }

        for (int[] i : edges) {
            if (i[0] == 1) {
                alice.add(i[1]);
                alice.add(i[2]);
                if (!alice.merge(i[1], i[2])) aliceRedundancy++;
            }
            if (i[0] == 2) {
                bob.add(i[1]);
                bob.add(i[2]);
                if (!bob.merge(i[1], i[2])) bobRedundancy++;
            }
        }
        if (alice.getPointCount() < n || bob.getPointCount() < n) return -1;
        if (alice.getNumOfGroups() > 1 || bob.getNumOfGroups() > 1) return -1;
        return typeIiiRedundancy + aliceRedundancy + bobRedundancy;
    }

    public int pivotIndex(int[] nums) {
        if (nums.length == 0) return -1;
        int n = nums.length;
        int[] fromLeft = new int[n];
        int[] fromRight = new int[n];
        fromLeft[0] = nums[0];
        fromRight[n - 1] = nums[n - 1];

        for (int i = 1; i < n; i++) {
            fromLeft[i] = fromLeft[i - 1] + nums[i];
            fromRight[n - i - 1] = fromRight[n - i] + nums[n - i - 1];
        }
        for (int i = 0; i < n; i++) {
            if (fromLeft[i] == fromRight[i]) return i;
        }
        return -1;
    }

    public int minimumOperations(String leaves) {
        int n = leaves.length();
        int[][] dp = new int[n][3];
        Maple m = new Maple(leaves);
        // 目标 r y r , 0-r, 1-y, 2-r
        // dp[i][j]
        // j=0且i>=0时, dp[i][0] = dp[i-1][0] + isYellow(i)
        // j=1且i>=1时, dp[i][1] = Math.min(dp[i-1][0],dp[i-1][1]) + isRed(i)
        // j=2且i>=2时, dp[i][2] = Math.min(dp[i-1][1],dp[i-1][2]) + isYellow(i)
        dp[0][0] = m.isYellow(0);
        dp[0][1] = dp[0][2] = dp[1][2] = Integer.MAX_VALUE;
        dp[1][0] = dp[0][0] + m.isYellow(1);
        dp[1][1] = Math.min(dp[0][0], dp[0][1]) + m.isRed(1);
        for (int i = 2; i < n; i++) {
            dp[i][0] = dp[i - 1][0] + m.isYellow(i);
            dp[i][1] = Math.min(dp[i - 1][0], dp[i - 1][1]) + m.isRed(i);
            dp[i][2] = Math.min(dp[i - 1][1], dp[i - 1][2]) + m.isYellow(i);
        }
        return dp[n - 1][2];
    }

    public int minimumEffortPath(int[][] heights) {

        // 0-上 1-下 2-左 3-右
        int numRow = heights.length;
        int numCol = heights[0].length;
        int finalIdx = numCol * numRow - 1;

        // 邻接矩阵 手动维护点坐标( idx = row * numCol + col )

        List<int[]> edges = new ArrayList<>();
        for (int i = 0; i < numRow; i++) {
            for (int j = 0; j < numCol; j++) {
                int id = i * numCol + j;
                if (i > 0) {
                    edges.add(new int[]{id - numCol, id, Math.abs(heights[i - 1][j] - heights[i][j])});
                }
                if (j > 0) {
                    edges.add(new int[]{id - 1, id, Math.abs(heights[i][j - 1] - heights[i][j])});
                }
            }
        }
        edges.sort(Comparator.comparingInt((e) -> e[2]));
        DisjointSetUnion dsu = new DisjointSetUnion();
        dsu.add(0);
        dsu.add(finalIdx);
        for (int[] e : edges) {
            dsu.add(e[0]);
            dsu.add(e[1]);
            dsu.merge(e[0], e[1]);
            if (dsu.isConnected(0, finalIdx)) {
                return e[2];
            }
        }

        return -1;
    }

}

class Solution {
    int[][] dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};

    public int minimumEffortPath(int[][] heights) {
        int m = heights.length;
        int n = heights[0].length;
        PriorityQueue<int[]> pq = new PriorityQueue<int[]>(new Comparator<int[]>() {
            public int compare(int[] edge1, int[] edge2) {
                return edge1[2] - edge2[2];
            }
        });
        pq.offer(new int[]{0, 0, 0});

        int[] dist = new int[m * n];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[0] = 0;
        boolean[] seen = new boolean[m * n];

        while (!pq.isEmpty()) {
            int[] edge = pq.poll();
            int x = edge[0], y = edge[1], d = edge[2];
            int id = x * n + y;
            if (seen[id]) {
                continue;
            }
            if (x == m - 1 && y == n - 1) {
                break;
            }
            seen[id] = true;
            for (int i = 0; i < 4; ++i) {
                int nx = x + dirs[i][0];
                int ny = y + dirs[i][1];
                if (nx >= 0 && nx < m && ny >= 0 && ny < n && Math.max(d, Math.abs(heights[x][y] - heights[nx][ny])) < dist[nx * n + ny]) {
                    dist[nx * n + ny] = Math.max(d, Math.abs(heights[x][y] - heights[nx][ny]));
                    pq.offer(new int[]{nx, ny, dist[nx * n + ny]});
                }
            }
        }
        return dist[m * n - 1];
    }
}


class Maple {
    private String l;

    public Maple(String l) {
        this.l = l;
    }

    public int isRed(int i) {
        return l.charAt(i) == 'r' ? 1 : 0;
    }

    public int isYellow(int i) {
        return l.charAt(i) == 'y' ? 1 : 0;
    }
}

class DisjointSetUnion {

    Map<Integer, Integer> father;
    Map<Integer, Integer> rank;

    public DisjointSetUnion() {
        father = new HashMap<>();
        rank = new HashMap<>();
    }

    public void add(int i) {
        // 置初始父亲为自身
        // 之后判断连通分量个数时候, 遍历father, 找value==key的
        father.putIfAbsent(i, i);
        rank.putIfAbsent(i, 1);
    }

    // 找父亲, 路径压缩
    public int find(int i) {
        //先找到根 再压缩
        int root = i;
        while (father.get(root) != root) {
            root = father.get(root);
        }
        // 找到根, 开始对一路上的子节点进行路径压缩
        while (father.get(i) != root) {
            int origFather = father.get(i);
            father.put(i, root);
            // 更新秩, 按照节点数
            rank.put(root, rank.get(root) + 1);
            i = origFather;
        }
        return root;
    }

    public boolean merge(int i, int j) {
        int iFather = find(i);
        int jFather = find(j);
        if (iFather == jFather) return false;
        // 按秩合并
        if (rank.get(iFather) >= rank.get(jFather)) {
            father.put(jFather, iFather);
            rank.put(iFather, rank.get(jFather) + rank.get(iFather));
        } else {
            father.put(iFather, jFather);
            rank.put(jFather, rank.get(jFather) + rank.get(iFather));
        }
        return true;
    }

    public boolean isConnected(int i, int j) {
        return find(i) == find(j);
    }

    public Map<Integer, Set<Integer>> getAllGroups() {
        Map<Integer, Set<Integer>> result = new HashMap<>();
        // 找出所有根
        for (Integer i : father.keySet()) {
            int f = find(i);
            result.putIfAbsent(f, new HashSet<>());
            result.get(f).add(i);
        }
        return result;
    }

    public int getNumOfGroups() {
        Set<Integer> s = new HashSet<Integer>();
        for (Integer i : father.keySet()) {
            s.add(find(i));
        }
        return s.size();
    }

    public boolean contains(int i) {
        return father.containsKey(i);
    }

    public int getPointCount() {
        return father.size();
    }

}