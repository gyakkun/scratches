import javafx.util.*;

import java.util.*;

class Scratch {
    public static void main(String[] args) {
        Scratch s = new Scratch();
        long timing = System.currentTimeMillis();

        int[] arr = {1581, 8359, 31343, 20278, 12564, 22129, 2498, 32665, 2876, 27457, 29555, 5353, 24857, 28600, 32367, 25386, 28350, 25062, 1708, 23620, 318, 4807, 17998, 29392, 21248, 22074, 5838, 300, 27152, 29442, 3950, 23330, 11309, 29119, 21505, 308, 7972, 27856, 4600, 14408, 412, 31377, 26727, 28713, 30740, 25867, 27778, 7243, 14510, 17498, 10145, 11029, 3407, 6438, 15776, 24851, 27381, 19199, 21430, 20809, 21235, 29525, 7466, 9318, 28133, 27622, 9627, 3518, 20431, 10356, 25820, 3817, 13057, 21182, 7255, 17950, 31483, 9578, 25537, 14195, 7192, 11396, 29048, 4210, 9229, 28114, 19689, 19699, 17886, 13126, 12997, 27710, 10782, 28153, 24859, 20738, 24905, 30770, 25219, 25950, 20173, 29309, 5598, 13367, 4389, 7258, 27829, 26919, 23757, 8462, 21130, 26763, 18417, 17056, 6032, 23571, 7700, 2238, 15378, 18969, 3152, 23067, 32038, 26383, 8163, 24791, 27193, 24880, 11519, 29375, 23392, 4711, 19085, 29629, 25041, 28930, 19946, 236, 31637, 10541, 8376, 24327, 14442, 29112, 8404, 18417, 9833, 8594, 32659, 22258, 26993, 31536, 4976, 1807, 14248, 25256, 8878, 27649, 5087, 27282, 14142, 2286, 6632, 20383, 2708, 21660, 7503, 16242, 13248, 18358, 28506, 19525, 16356, 8917, 32149, 25821, 5513, 3007, 131, 24357, 25925, 10186, 19883, 20536, 13601, 2366, 31409, 26887, 30141, 10829, 20304, 29642, 9675, 32330, 21215, 20367, 5415, 548, 772, 8711, 31020, 14374, 4672, 10690, 1254, 22115, 20863, 31667, 28776, 26060, 26849, 20186, 4537, 6398, 16754, 19626, 16076, 5812, 28137, 1212, 3340, 17430, 20421, 7149, 29629, 7227, 4914, 29367, 26473, 17952, 4728, 18036, 28728, 27250, 31188, 5409, 20892, 12882, 6336, 30563, 27571, 7140, 9882, 21035, 8795, 19953, 10172, 13389, 12236, 3148, 10819, 30987, 28276, 22181, 28135, 25872, 11473, 7476, 7838, 20618, 19721, 6632, 23584, 31762, 27677, 31020, 18936, 2803, 23648, 19362, 24311, 11790, 16690, 10932, 3816, 12651, 19570, 27182, 14819, 2723, 27081, 25106, 24592, 19606, 31955, 21218, 30070, 13073, 16223, 23597, 24884, 15915, 2024, 28585, 20907, 18463, 915, 22625, 4894, 26885, 26307, 16599, 25558, 8850, 590, 7975, 15969, 25459, 10618, 12360, 22055, 20245, 22836, 5909, 8198, 20886, 31321, 1056, 17748, 1968, 29359, 29840, 7338, 16958, 26209, 4142, 23204, 29222, 17916, 3865, 5265, 23072, 7556, 11063, 31738, 26999, 8889, 16718, 21891, 30627, 4210, 24335, 10184, 26352, 27736, 16734, 11094, 13719, 21673, 13584, 8611, 21473, 31147, 14039, 18762, 6857, 15859, 21481, 1618, 21682, 10520, 10014, 23484, 3124, 22849, 25193, 14276, 27502, 1955, 13285, 233, 14891, 31971, 948, 21242, 18588, 24271, 17480, 12793, 15087, 17165, 9022, 17071, 12381, 19431, 6886, 7617, 25650, 2837, 9091, 4804, 5184, 28571, 19921, 20824, 8059, 13567, 13831, 17051, 28139, 31130, 20165, 27322, 19141, 10780, 5192, 9859, 16852, 12607, 854, 27237, 11665, 21528, 541, 25694, 26459, 6883, 32060, 10549, 23294, 11611, 24241, 7805, 7632, 27574, 12904, 3822, 12549, 6338, 18736, 26323, 5061, 31282, 19990, 408, 29344, 8449, 23959, 4818, 23131, 3382, 28647, 24616, 13464, 541, 26969, 14833, 28144, 4842, 9220, 10065, 11563, 15156, 9345, 7645, 26737, 8294, 20980, 21754, 7523, 8926, 2385, 2753, 4050, 24220, 12705, 27403, 20105, 19532, 21953, 914, 1123, 24140, 2820, 8949, 32179, 16141, 21426, 18565, 20138, 2477, 5612, 18173, 26570, 4508, 12458, 27165, 31280, 21839, 24250, 9817, 31742, 22865, 27992, 29160, 21657, 9735, 14018, 17663, 26509, 19120, 26598, 14865, 3899, 19125, 14138, 4433, 7516, 6205, 26928, 22723, 27733, 19815, 8442, 20880, 10879, 9922, 14660, 11717, 9913, 31712, 7631, 29388, 32152, 13243, 13180, 20395, 23813, 17663, 27634, 25937, 25648, 27683, 12432, 20780, 6391, 23415, 8916, 10539, 3711, 19781, 6509, 30354, 30179, 566, 23681, 21233, 5383, 13050, 15064, 16650, 8683, 5549, 3462, 20648, 6888, 15215, 7932, 12102, 27606, 20251, 22167, 23464, 32536, 5353, 19895, 13186, 31720, 21560, 23635, 27180, 23497, 19773, 18510, 5558, 8658, 6960, 13552, 23798, 26270, 9046, 26129, 1700, 32033, 18779, 30160, 31896, 19030, 9094, 5086, 17875, 18884, 3138, 21229, 3461, 21784, 3898, 18043, 2413, 15822, 13716, 623, 8401, 10466, 19484, 25960, 20363, 9852, 12205, 30523, 19003, 31683, 24813, 11370, 21574, 14533, 9437, 5929, 29102, 22904, 30341, 16114, 6064, 1997, 4920, 24251, 32029, 12838, 18856, 795, 19341, 21871, 27214, 18517, 18116, 14834, 17758, 29191, 29297, 3907, 112, 21193, 25250, 31921, 14825, 8166, 22366, 8755, 12473, 16796, 13627, 19363, 11846, 16794, 27840, 4086, 2050, 21717, 6933, 546, 25851, 24606, 10989, 22096, 18038, 23393, 766, 31086, 8966, 19221, 2793, 28951, 24542, 2752, 14758, 7130, 3277, 13531, 23841, 19539, 18963, 15342, 31237, 12612, 12487, 21433, 21993, 31631, 6360, 11934, 12373, 3581, 3521, 26752, 15795, 32363, 17182, 17898, 17380, 31238, 6298, 15923, 12300, 13141, 15497, 18824, 23938, 31373, 25325, 22601, 31271, 2350, 9672, 2612, 10894, 14041, 29420, 30133, 23243, 614, 27452, 10689, 6560, 22839, 16454, 11145, 16826, 18908, 7890, 19622, 4056, 2588, 26882, 1886, 28718, 6592, 5116, 9451, 19596, 19130, 18566, 5129, 22264, 2224, 5087, 31929, 25480, 32399, 7802, 11520, 20933, 13593, 21424, 17251, 31106, 7926, 16317, 12070, 11486, 26932, 3783, 32652, 32074, 10072, 12875, 28315, 17248, 25526, 8595, 22682, 13656, 11773, 11930, 28442, 8404, 4838, 9564, 26147, 3178, 23923, 12801, 10691, 8059, 548, 31833, 1201, 19528, 8397, 5064, 13412, 24011, 13158, 17603, 13301, 20785, 28446, 26631, 675, 15101, 11923, 23813, 21320, 28757, 5163, 4031, 5211, 18852, 27472, 9128, 11545, 10939, 20075, 23168, 26101, 26533, 522, 14377, 27740, 21468, 31099, 10889, 16100, 31784, 26531, 4689, 23969, 11268, 15322, 17217, 8300, 6936, 2292, 7299, 16607, 12421, 23576, 8726, 18302, 31538, 31246, 16236, 19847, 23611, 30310, 12197, 11239, 27706, 31128, 3877, 31830, 32209, 30739, 29090, 1040, 7128, 1537, 24963, 11462, 2309, 13016, 29208, 18260, 13231, 1368, 17987, 32187, 22650, 4537, 15241, 1143, 16881, 12011, 20334, 28447, 1981, 24590, 30501, 26125, 31431, 7561, 17875, 21469, 4265, 14861, 16555, 15977, 4687, 16230, 18815, 13844, 20488, 30852, 23344, 23330, 788, 11546, 22017, 31485, 14161, 31011, 25479, 2586, 27790, 30894, 26498, 20451, 32563, 12441, 26302, 17104, 29561, 7496, 21696, 15650, 18748, 24819, 32372, 7263, 16265, 7742, 26507, 24804, 25301, 32332, 7335, 32591, 23555, 19702, 25274, 14558, 21223, 10437, 14040, 30949, 29693, 2616, 17604, 22611, 17527, 26028, 30027, 24538, 30672, 27234, 24111, 23428, 27820, 1467, 20016, 21013, 8315, 13331, 29055, 10824, 22094, 19656, 5001, 20227, 25292, 24723, 1537, 7277, 9404, 2356, 20142, 20821, 26738, 32646, 18302, 4913, 14779, 15550, 26810, 3395, 10314, 11149, 32053, 9484, 23174, 12117, 16226, 23371, 5256, 32262, 9126, 21344, 27426, 16747, 9009, 32564, 23757, 24190, 4101, 10229, 1581, 4450, 20112, 26356, 22849, 4675, 7092, 17401, 2901, 30017, 28541, 7144, 32062, 5847, 8545, 14117, 21944, 12010, 13859, 7355, 7121, 6048, 9368, 24424, 17400, 27327, 1987, 24589, 14154, 14263, 5111, 26256, 15360, 25892, 17640, 17862, 26097, 8271, 26539, 8534, 17890, 28822, 12349, 28290, 27549, 21390, 30854, 3041, 16279, 25354, 22521, 31134, 29597, 11324, 16674, 25792, 28441, 29786, 9862, 9229, 12205, 13520, 20670, 10226, 24372, 9585, 4214, 19315, 22685, 4066, 28594, 3711, 23946, 28336, 25832, 557, 26431, 8992, 11633, 3046, 6083, 28575, 31887, 5656, 19689, 24689, 29140, 7363, 3965, 25791, 5092, 6101, 25603, 12850, 2974, 20391, 2046, 740, 17093, 12742, 1506, 20336, 2220, 19020, 12296, 17260, 25724, 5977, 5678, 3939, 2542, 21654, 4169, 13865, 19776, 19652, 26412, 8638, 10670, 9927, 22270, 8329, 32061, 30812, 6041, 4848, 9737, 31838, 9666, 13430, 29890, 1175, 13775, 29737, 28037, 27083, 13210, 12860, 1515, 24401, 27270, 12761, 27306, 27980, 13874, 29659, 13687, 9336, 22750, 22068, 3896, 9585, 14146, 12110, 14524, 3292, 5538, 29497, 8700, 24705, 1520, 12171, 25354, 8642, 12470, 23912, 30957, 22654, 2736, 28047, 3172, 28314, 8231, 2411, 26989, 23374, 20944, 29677, 18445, 21592, 16453, 32244, 21477, 17752, 4780, 1895, 19259, 11869, 4421, 6664, 29389, 4621, 31175, 15594, 25625, 20537, 16858, 29028, 253, 11188, 12646, 19409, 27974, 14373, 9514, 18865, 4323, 22420, 27317, 10839, 27754, 5576, 26431, 10285, 7062, 11280, 23624, 6128, 1829, 7229, 17150, 8170, 5511, 5674, 31095, 32434, 16743, 15107, 31631, 28368, 24463, 764, 13111, 6723, 16981, 16295, 4269, 32405, 472, 32438, 22728, 6591, 12215, 15981, 2055, 26067, 22505, 18605, 7423, 1881, 6500, 31875, 17989, 12167, 12101, 10148, 13576, 5274, 17958, 4870, 10332, 10773, 7720, 3363, 9948, 22413, 26259, 11474, 24037, 11618, 21417, 5164, 12034, 8807, 14889, 26777, 29365, 11591, 12542, 19525, 9137, 31184, 30617, 6634, 14631, 13780, 29284, 29325, 30219, 375, 11023, 12539, 4184, 19516, 4384, 20731, 22928, 2219, 8365, 4915, 24131, 29644, 8823, 27217, 25404, 23475, 3897, 1296, 8404, 30615, 31960, 9450, 28334, 21614, 5819, 1181, 13126, 3592, 13229, 10281, 18452, 24937, 20818, 3887, 4836, 15147, 3012, 27022, 5351, 26726, 3705, 30693, 2935, 10089, 30330, 14410, 15242, 6494, 11623, 11044, 18534, 23773, 4538, 982, 31555, 8326, 4417, 20984, 32136, 5848, 21355, 24240, 31402, 28349, 17796, 1259, 3278, 9974, 1216, 23149, 32619, 30784, 24261, 15838, 3140, 24499, 25802, 17612, 11624, 5859, 30828, 19426, 11516, 14719, 12280, 16331, 26192, 24327, 25507, 230, 26332, 8839, 7081, 21168, 18562, 1927, 3104, 8960, 8097, 4762, 5145, 20082, 14485, 21425, 3202, 2855, 20097, 11511, 18041, 29704, 10138, 30214, 4148, 6227, 29620, 7903, 17418, 8498, 22534, 19419, 1585, 29663, 9299, 201, 30081, 22737, 10886, 15227, 26617, 7035, 9449, 12884, 28494, 26056, 16354, 5684, 27169, 25915, 24438, 30478, 26295, 29390, 9414, 19384, 17126, 17909, 807, 24994, 18389, 30505, 11434, 28797, 19429, 7971, 19468, 22224, 8903, 29988, 2346, 13077, 16004, 32511, 26638, 11464, 24766, 17871, 31228, 3580, 3001, 10214, 17258, 26852, 18847, 30072, 26243, 9710, 25715, 17864, 18308, 7018, 20996, 8859, 22605, 22997, 15198, 29967, 9035, 4001, 4454, 20062, 26306, 13272, 30190, 6492, 10048, 25103, 16803, 30270, 19987, 799, 17486, 13465, 8946, 18476, 26265, 32121, 23596, 14734, 5023, 10397, 18111, 20191, 14714, 1784, 19988, 25227, 11564, 8680, 19615, 20294, 14364, 18351, 6266, 9471, 9121, 25698, 23436, 17558, 26911, 21708, 21814, 28863, 14360, 27039, 24558, 14282, 6887, 26337, 5008, 30612, 6302, 11651, 5551, 3115, 28261, 16684, 27271, 13671, 20431, 16472, 30455, 8448, 10920, 31130, 15494, 6346, 11352, 19823, 16880, 30574, 21434, 31120, 29927, 24165, 19640, 15394, 30329, 26883, 6060, 12258, 5704, 24763, 169, 18609, 4839, 4550, 18872, 28115, 16275, 62, 20630, 6230, 14076, 2589, 17772, 14286, 4482, 1558, 17358, 13762, 10507, 19510, 28373, 9946, 19771, 24438, 8152, 20065, 7412, 27837, 9828, 868, 28992, 19535, 14644, 12705, 588, 18788, 19926, 2568, 10843, 2170, 32357, 1718, 31730, 11334, 22847, 13023, 17944, 10704, 26624, 2159, 30786, 23119, 4428, 24692, 21769, 31616, 22478, 2878, 21405, 2065, 31935, 10457, 14892, 18394, 1460, 13202, 16791, 27910, 27466, 5704, 27340, 22044, 19983, 16836, 5820, 17162, 28085, 2777, 23602, 13454, 21589, 1600, 13453, 8072, 899, 10798, 2712, 23524, 21082, 19856, 14226, 30724, 14096, 19206, 27110, 16485, 5179, 2701, 127, 9834, 6485, 13374, 8161, 20075, 26648, 27448, 30365, 15374, 5062, 31145, 723, 19854, 27371, 21765, 29671, 14312, 8840, 14570, 31163, 15691, 13665, 20864, 10268, 14199, 8826, 11966, 10814, 6395, 15713, 29961, 21002, 15685, 16374, 19488, 16203, 20559, 29431, 24337, 16282, 3741, 11140, 25078, 21618, 4939, 21896, 13444, 1179, 11171, 25367, 20917, 29298, 209, 9553, 2793, 5650, 8535, 7471, 23692, 27220, 31061, 5695, 25924, 384, 16498, 2457, 123, 11914, 24639, 12011, 20170, 19387, 21391, 14634, 3048, 14169, 17139, 9790, 6105, 30423, 11261, 20155, 1044, 3652, 24923, 5782, 21474, 23756, 11410, 4507, 26563, 6797, 12844, 24050, 6185, 27575, 430, 21814, 9109, 16732, 14602, 3815, 4841, 4087, 32747, 9774, 13499, 18841, 13440, 30204, 1947, 24991, 18686, 4066, 31317, 18641, 4329, 5075, 15882, 31929, 31027, 7544, 3607, 14138, 19228, 23155, 409, 11390, 19420, 19558, 28934, 13943, 557, 13090, 18482, 24813, 9906, 22836, 13938, 9803, 24141, 7684, 15950, 24673, 10305, 29658, 11865, 18643, 12817, 23767, 31135, 26122, 20182, 23067, 859, 21372, 32381, 26292, 29965, 11394, 14000, 31894, 17048, 6345, 7486, 4026, 24400, 9655, 27881, 12360, 29288, 13444, 13139, 20764, 18041, 18046, 11547, 1745, 6047, 15107, 27303, 24447, 16531, 24217, 29931, 21288, 31672, 10953, 6285, 14391, 805, 16687, 28882, 29344, 4906, 23016, 21984, 27064, 19548, 24068, 26615, 9006, 30813, 6742, 9831, 6066, 10644, 31465, 14388, 12733, 20301, 25976, 15832, 31711, 12548, 26884, 14740, 2178, 2366, 31051, 26677, 10614, 32586, 21041, 11256, 24455, 15864, 3863, 7875, 23815, 16836, 7231, 11524, 16586, 26126, 14210, 26523, 11532, 26769, 27796, 3465, 20845, 29768, 25239, 26945, 28606, 8530, 4112, 9589, 3705, 14378, 27334, 12853, 22173, 6197, 9312, 1864, 25850, 17854, 8692, 10340, 5020, 8250, 1499, 22678, 1326, 29030, 26642, 2632, 4783, 6008, 18881, 19477, 18639, 30775, 10178, 17293, 25390, 11413, 31396, 9770, 10934, 29814, 10956, 7029, 9831, 4126, 1987, 24414, 24310, 19641, 2087, 12592, 1663, 28768, 23083, 16811, 31032, 25035, 2201, 13740, 21136, 16037, 8937, 32269, 9411, 19800, 20860, 29384, 4729, 22500, 16366, 27008, 26844, 29029, 19792, 1611, 7079, 30972, 14347, 4381, 21231, 29140, 20921, 21725, 27713, 24422, 12024, 17241, 32023, 32683, 15262, 27986, 12204, 28935, 19744, 30440, 31915, 8319, 18485, 6736, 7242, 15283, 15288, 26500, 30491, 1709, 19425, 7792, 29851, 12772, 21672, 20297, 29869, 1441, 23220, 4680, 23833, 3308, 25173, 530, 16926, 28943, 20975, 1921, 8590, 13982, 15787, 23180, 27331, 20794, 16827, 3642, 25736, 25860, 19610, 7357, 19949, 26642, 31887, 20588, 12029, 23678, 11338, 31598, 24694, 356, 9502, 31309, 2556, 28001, 9540, 22469, 6468, 8588, 29601, 29557, 17837, 19341, 27528, 7292, 25582, 23244, 1069, 8714, 19103, 22173, 6281, 4294, 7016, 6295, 15131, 12668, 27115, 13784, 26092, 3321, 19775, 1455, 7976, 8100, 4137, 9489, 13134, 2092, 2972, 27188, 29757, 12803, 3172, 14711, 4561, 21964, 4545, 29966, 31659, 3669, 31601, 26672, 15803, 24558, 30005, 18000, 8781, 29548, 25218, 6509, 22062, 28392, 18978, 14129, 8575, 9312, 26700, 366, 17387, 16271, 31085, 28044, 18527, 14432, 10862, 8783, 10764, 24285, 20070, 8125, 21237, 9294, 10823, 26390, 32567, 8053, 16150, 30266, 9725, 4207, 5459, 30201, 29363, 5828, 28116, 65, 28336, 3642, 12414, 25451, 23966, 15746, 24463, 23458, 12552, 12725, 32672, 27552, 26741, 5880, 8196, 29140, 17372, 2171, 19650, 22744, 8593, 9705, 23197, 12327, 5031, 12877, 13272, 26754, 4181, 31829, 1133, 15627, 24744, 12511, 26090, 24783, 9974, 11141, 9744, 15903, 31847, 2142, 9338, 25588, 28047, 11425, 29280, 14164, 9172, 18046, 8606, 18928, 18628, 16666, 32697, 8361, 25933, 18092, 32172, 8947, 19684, 25310, 31192, 4443, 1557, 10481, 1295, 6699, 8460, 12938, 28293, 17611, 1657, 30401, 5820, 28412, 9065, 3467, 11545, 19957, 30263, 25989, 8742, 10280, 16188, 24590, 25810, 27096, 10072, 3339, 21173, 30103, 12273, 29763, 4979, 31158, 3959, 7968, 14828, 22236, 7236, 11319, 3013, 21577, 32306, 21971, 2121, 7005, 6787, 20865, 17266, 10744, 21248, 30507, 29223, 32367, 19242, 17670, 2574, 23194, 22074, 17543, 19276, 7866, 15307, 16584, 13486, 17586, 10429, 4547, 53, 4250, 32058, 26237, 2731, 20175, 18114, 13731, 8864, 9772, 8225, 20323, 25178, 29500, 30748, 19058, 22853, 4356, 13644, 20988, 11996, 22493, 7253, 7273, 24320, 14257, 14155, 18819, 19283, 31703, 24774, 12992, 31894, 30550, 19818, 7182, 2940, 22861, 24446, 13766, 15808, 11392, 10047, 29483, 9425, 16430, 28031, 4009, 3658, 28151, 8370, 7808, 27520, 22571, 20574, 21941, 13800, 30173, 21808, 16169, 14181, 25471, 18772, 3807, 1339, 17841, 14801, 17138, 26858, 29200, 5295, 27667, 15324, 5487, 13558, 31028, 8988, 17008, 17671, 15334, 2898, 430, 21110, 1706, 4430, 13417, 24061, 19281, 25262, 32199, 4958, 2066, 10936, 2875, 18030, 2072, 24166, 29140, 11611, 20447, 3319, 17658, 32103, 32143, 23639, 29657, 20006, 31218, 23325, 16798, 4864, 27407, 6544, 18178, 13424, 31772, 20791, 6384, 10069, 22264, 22691, 15309, 14900, 9658, 6198, 25884, 21248, 1582, 769, 18190, 17127, 7326, 17828, 16063, 25832, 4583, 6429, 13091, 25028, 30100, 5710, 15947, 959, 8694, 29885, 4968, 12680, 6039, 32483, 5228, 32321, 31631, 11080, 20749, 24217, 25012, 16874, 982, 27271, 16197, 24387, 9084, 30245, 12380, 28897, 9627, 11042, 6015, 20910, 12600, 24901, 4837, 12314, 258, 21907, 25915, 796, 2417, 13661, 9013, 15347, 8526, 7197, 15717, 11075, 30939, 32616, 15927, 962, 17551, 31453, 28767, 27367, 29213, 10896, 1604, 9139, 3584, 24949, 3275, 28211, 4537, 10219, 7689, 5806, 29334, 16210, 5724, 24266, 21177, 10446, 15466, 22381, 24756, 27934, 19003, 10832, 16669, 25767, 1096, 24389, 2875, 29894, 8030, 28339, 24006, 2241, 5500, 13068, 2652, 23222, 26391, 6495, 7440, 25900, 814, 11310, 31308, 10847, 9117, 29009, 23835, 17471, 17200, 26042, 27803, 6623, 2246, 27428, 22424, 7718, 14187, 30386, 4965, 14256, 10376, 19380, 11865, 395, 26119, 1228, 31020, 6978, 28190, 12750, 28128, 17145, 11031, 3819, 5881, 21911, 14535, 10916, 30840, 28738, 7201, 9489, 20889, 15966, 16035, 10240, 4515, 17400, 2975, 32486, 10243, 3983, 29858, 20838, 7963, 20157, 23216, 25794, 14535, 21537, 24570, 19106, 8884, 8895, 21767, 22816, 24204, 8987, 6295, 18344, 3631, 13484, 4076, 18925, 19970, 6387, 22513, 1872, 6251, 27291, 29585, 32702, 12928, 16453, 3649, 16785, 12170, 13780, 9473, 3588, 31002, 28324, 32174, 5188, 4988, 23663, 12468, 4989, 19394, 24423, 26039, 13799, 9447, 24500, 3788, 5766, 663, 26115, 23324, 15675, 1666, 22367, 18238, 32506, 5968, 1519, 13400, 32478, 11110, 7375, 5126, 27886, 18589, 9207, 19313, 30261, 19406, 2268, 23214, 25495, 16429, 3254, 1547, 11475, 9007, 15601, 3371, 3030, 17591, 23996, 18436, 31183, 4021, 24145, 24895, 28337, 21398, 18706, 10361, 14596, 32115, 14657, 4729, 21574, 22370, 11027, 13744, 18354, 2106, 5110, 32262, 24329, 5393, 1702, 19826, 10952, 14335, 17290, 20372, 26586, 6946, 5369, 3587, 28042, 20436, 2584, 21048, 17359, 29902, 1195, 25812, 11508, 13625, 12684, 8830, 2030, 10071, 9138, 31162, 28133, 21643, 4166, 10844, 13759, 21221, 1216, 1415, 24564, 4273, 21914, 29980, 11185, 16208, 23801, 28937, 27505, 21496, 25224, 9582, 7231, 19984, 22505, 14013, 147, 786, 11369, 5754, 31640, 842, 15007, 21916, 25644, 11015, 3189, 4853, 7979, 11986, 8, 309, 13018, 25209, 388, 20539, 4081, 1013, 22309, 30758, 27827, 21601, 10910, 30199, 8872, 14124, 13811, 17538, 21030, 30408, 10292, 28020, 22274, 3409, 16914, 7100, 11141, 26673, 11693, 8330, 8474, 27485, 15006, 7400, 23115, 462, 30980, 3720, 29496, 9412, 30952, 30326, 8507, 15358, 29650, 30217, 20514, 15216, 20147, 16180, 6877, 13271, 12181, 26956, 4108, 1692, 2120, 29777, 13730, 27423, 28068, 26999, 21505, 23263, 26867, 2677, 18789, 29180, 19089, 12810, 5210, 20005, 9139, 13499, 9878, 16025, 9761, 31588, 28073, 14383, 6117, 11277, 3729, 13857, 23911, 924, 7568, 12136, 27387, 10504, 8200, 7718, 23705, 19785, 3609, 17014, 29431, 30013, 14641, 6819, 11480, 22501, 28431, 17339, 2823, 24384, 7754, 6435, 7332, 31767, 14757, 20081, 14316, 32252, 11310, 26222, 13998, 21588, 3773, 32006, 26883, 25715, 16625, 9468, 987, 15882, 31689, 17527, 6705, 14510, 28246, 854, 14695, 24313, 14691, 16685, 2905, 7475, 30288, 5478, 7133, 6745, 24914, 20869, 605, 11669, 24744, 6255, 1019, 21916, 1694, 23895, 380, 13880, 13564, 2549, 8919, 29979, 23887, 17934, 18074, 3475, 10382, 9909, 6582, 1607, 7761, 11283, 10240, 21148, 31896, 6367, 27012, 17520, 1962, 2439, 30835, 23927, 29017, 5291, 19076, 28957, 2319, 27713, 32004, 5214, 136, 11442, 20718, 25802, 25265, 27093, 1525, 14501, 8500, 11113, 16055, 14688, 23683, 1367, 20524, 25153, 27997, 29193, 3445, 32048, 9317, 2075, 22457, 19446, 26562, 24568, 28461, 20131, 5743, 10596, 29018, 18991, 24724, 13178, 27671, 1149, 8443, 3052, 20722, 20805, 11054, 29466, 9194, 14286, 29306, 22216, 28007, 24812, 4983, 29210, 26961, 19500, 5737, 4552, 31525, 13260, 16343, 30620, 10176, 10080, 28764, 1001, 27294, 12024, 4179, 16880, 31562, 20572, 8328, 11211, 5816, 25003, 12486, 20236, 4190, 3875, 14177, 1449, 11254, 9197, 182, 4001, 25434, 28250, 29671, 3850, 25087, 15916, 13914, 11882, 24621, 29134, 22615, 27438, 3548, 16727, 3715, 17198, 30955, 21936, 14234, 16633, 32278, 5072, 10785, 26919, 5370, 20600, 22370, 19936, 29259, 31303, 16767, 4338, 225, 20451, 23727, 19485, 7591, 11077, 18310, 7118, 27262, 7317, 29014, 12375, 3967, 30638, 20251, 9933, 26664, 14670, 28507, 29094, 2940, 30034, 28037, 30745, 2315, 2265, 4825, 2591, 8376, 17141, 11321, 7409, 28636, 23685, 19197, 24262, 16372, 32295, 8641, 12311, 30578, 8251, 12180, 1016, 22313, 7233, 7223, 5200, 11669, 2195, 7349, 32198, 13481, 7984, 24537, 1274, 19060, 18751, 11978, 12874, 1966, 20080, 3067, 15142, 28893, 31377, 8515, 30647, 7074, 13496, 31322, 26660, 15073, 12217, 1931, 12427, 22150, 10493, 16394, 31530, 30426, 496, 25502, 24906, 21991, 359, 9807, 17215, 2288, 11060, 3961, 30335, 29504, 19644, 21144, 11674, 536, 20583, 23687, 24134, 15777, 7241, 21759, 9550, 1714, 9424, 18589, 28272, 6100, 16644, 13024, 20913, 30099, 8210, 21749, 23710, 23266, 31479, 16073, 551, 2083, 24226, 10134, 2595, 23837, 4859, 14713, 29004, 23075, 12584, 13756, 23457, 11659, 27730, 6243, 32602, 7494, 2606, 9000, 11793, 8377, 31612, 24447, 32060, 30048, 9891, 5948, 17563, 4261, 5367, 32699, 1414, 28050, 18358, 19901, 22780, 25132, 22316, 14739, 32110, 17936, 19343, 10013, 13876, 24370, 6728, 26155, 25540, 4433, 11844, 14793, 26364, 20366, 30204, 22648, 12237, 25286, 5703, 29335, 19334, 27971, 25861, 26678, 29667, 6648, 2762, 21115, 22208, 13878, 17464, 21656, 19086, 7156, 18232, 23058, 1789, 11938, 10984, 585, 16661, 498, 27317, 7766, 16847, 23828, 26377, 23888, 1616, 5141, 3057, 9750, 5977, 10018, 611, 26517, 16954, 16704, 28950, 9562, 12134, 4696, 26669, 23137, 3131, 31350, 22484, 10073, 8801, 12008, 1685, 5277, 22660, 28381, 14117, 7723, 17595, 22740, 15714, 30343, 15704, 12506, 27029, 14643, 18093, 3351, 32683, 10342, 470, 3720, 28534, 14429, 17870, 16041, 19333, 3209, 7247, 13305, 9897, 24294, 32715, 27888, 3840, 29729, 9579, 31571, 26749, 15832, 23298, 21240, 19391, 14744, 13466, 12865, 5995, 4436, 1470, 12879, 14647, 29927, 13742, 6484, 12742, 14384, 32181, 14323, 16242, 9268, 2322, 24072, 31577, 21933, 2981, 19643, 11440, 31709, 5853, 23680, 11465, 15668, 24771, 20742, 5235, 14900, 11734, 13880, 16281, 3782, 4181, 7817, 18724, 2850, 1294, 16446, 6193, 11402, 28442, 25374, 17050, 15841, 23814, 25187, 2093, 32383, 17627, 17453, 15234, 3930, 25422, 32504, 24462, 16700, 5889, 27360, 8756, 4218, 13887, 8233, 26311, 11764, 10338, 10230, 13637, 29293, 3582, 23640, 13457, 16041, 21942, 8713, 29154, 2557, 13903, 29498, 4538, 27301, 15294, 17061, 18726, 26458, 2881, 11398, 6582, 5864, 6802, 17748, 20039, 15887, 15046, 3126, 10858, 2433, 10580, 27366, 26696, 26162, 18494, 31951, 26485, 25641, 4569, 13463, 19555, 31167, 5048, 3390, 25541, 21547, 2908, 9248, 2346, 30452, 28762, 29639, 1916, 24110, 14642, 23293, 2619, 14571, 20588, 16311, 25875, 29844, 9461, 291, 4349, 7728, 29236, 14976, 23128, 18185, 17545, 25561, 24692, 24034, 13325, 29277, 25183, 32700, 4452, 8767, 3531, 5877, 31885, 12997, 27514, 23617, 10301, 5288, 20718, 1564, 25817, 28859, 3423, 12548, 5546, 8021, 17811, 16362, 4825, 1414, 28961, 626, 24144, 25686, 1995, 29008, 31121, 9356, 30201, 23321, 4155, 10178, 15900, 1746, 25410, 27673, 4428, 32424, 21770, 20403, 5361, 27724, 16526, 25823, 11504, 27346, 9152, 6276, 20635, 339, 17635, 6525, 11537, 17538, 283, 202, 19231, 27777, 1574, 16877, 16898, 3167, 26671, 6558, 25819, 23813, 10520, 22155, 27604, 10628, 26288, 179, 950, 32162, 2015, 3940, 31148, 20405, 30564, 9974, 19453, 26185, 31058, 18158, 10783, 23380, 19216, 6447, 4330, 25457, 12148, 17755, 29422, 21740, 31605, 9064, 24124, 16943, 28562, 10859, 12642, 12112, 32068, 3432, 18408, 14811, 19185, 10791, 21147, 5510, 28339, 13964, 12613, 12592, 19964, 23414, 20577, 28462, 27601, 6576, 17095, 18489, 5810, 4760, 19256, 16417, 22889, 1788, 23653, 6994, 17496, 21183, 20260, 7570, 21960, 25268, 28758, 31856, 15733, 16265, 13347, 13720, 18624, 2758, 7167, 13350, 21393, 5946, 9625, 31593, 16516, 11883, 5045, 20928, 10094, 21129, 5857, 2004, 3829, 26853, 12503, 16328, 32468, 28880, 26973, 22835, 22724, 31059, 6677, 4635, 15216, 31982, 12956, 28211, 5433, 14576, 11780, 1889, 12449, 6717, 31509, 10819, 8776, 25293, 19070, 21633, 4899, 29465, 11441, 57, 14717, 9072, 18021, 27921, 26579, 4309, 14381, 5732, 12844, 17306, 13450, 16854, 15905, 10303, 5136, 5825, 6141, 25310, 18182, 4458, 22373, 21660, 21731, 8790, 15769, 3255, 32053, 6678, 20420, 9246, 4489, 2075, 26872, 12631, 14441, 15663, 21367, 30427, 24800, 28597, 14815, 12569, 3102, 32072, 12365, 14294, 25501, 25735, 28576, 2304, 6685, 4297, 24719, 12909, 268, 14009, 7820, 5488, 20967, 6277, 18679, 6421, 12808, 9567, 14088, 19314, 12862, 27643, 14877, 24140, 14711, 4853, 10866, 16357, 3562, 15785, 29882, 29746, 28654, 15070, 2864, 13250, 5105, 3912, 10949, 13461, 22605, 8605, 26480, 18788, 7531, 23445, 25285, 5019, 6423, 16169, 11300, 23372, 11252, 8641, 5124, 16118, 25742, 20420, 24194, 15775, 24240, 5509, 19487, 4127, 2443, 9304, 12353, 26489, 19878, 25666, 16148, 5470, 17409, 8713, 4827, 18972, 15741, 19838, 1747, 7706, 20624, 9835, 3343, 13641, 14582, 5382, 1075, 22489, 1840, 6555, 11587, 17189, 2085, 13627, 22575, 23989, 15532, 1844, 29579, 4216, 18417, 27695, 7970, 24008, 11637, 20673, 12966, 1023, 29708, 6248, 27096, 15485, 10331, 7326, 6419, 14558, 18530, 8394, 24143, 17414, 702, 7423, 5885, 15757, 4232, 12135, 32052, 9413, 2010, 24333, 32494, 8334, 24305, 28430, 24569, 32753, 20586, 26928, 5870, 14714, 30, 18931, 21338, 25690, 22172, 20885, 17878, 30857, 8216, 17840, 14805, 24876, 26240, 2745, 28305, 22585, 1595, 30961, 10442, 29644, 11980, 5442, 25262, 6798, 29989, 20602, 19150, 2705, 14670, 31963, 22433, 32309, 12775, 4327, 22155, 9557, 31191, 7609, 13122, 12590, 7867, 16984, 10713, 22590, 26040, 17673, 8466, 6837, 31277, 22797, 22414, 8646, 16503, 21131, 8603, 1398, 19312, 11592, 32484, 20480, 9459, 2673, 693, 29892, 4205, 17804, 30482, 25863, 31402, 4733, 16052, 31572, 9433, 18413, 31392, 13771, 13555, 22732, 23793, 15200, 21018, 13945, 12194, 30113, 17654, 8557, 17657, 20935, 11612, 9140, 19385, 12595, 4745, 4725, 16719, 6750, 4130, 21284, 10326, 20187, 12103, 26463, 11628, 6931, 25099, 25990, 32042, 3288, 17254, 27770, 26990, 22119, 21962, 9311, 30654, 16594, 19702, 21587, 15861, 2506, 16445, 28103, 29818, 3655, 32343, 22394, 11105, 7874, 2803, 16047, 9122, 10002, 22313, 17448, 23308, 23398, 6176, 30142, 16194, 7067, 17984, 8046, 8991, 24761, 26310, 7261, 12540, 10928, 31075, 27218, 12200, 21779, 9292, 26339, 14813, 1741, 14802, 1063, 16922, 15945, 14487, 3414, 1011, 4293, 24012, 25067, 13665, 8623, 16355, 9626, 7711, 14632, 30763, 634, 13720, 18451, 19058, 15201, 6532, 5107, 8893, 25740, 32627, 24036, 18546, 25834, 22498, 18491, 19780, 30708, 29787, 32556, 5043, 20115, 11014, 16437, 14092, 3777, 6126, 30778, 30361, 1754, 21177, 25421, 20817, 24691, 18372, 19270, 6628, 16479, 23681, 30329, 6681, 939, 21000, 19199, 21612, 11920, 19723, 18858, 21232, 4167, 25441, 29477, 27767, 12477, 27633, 30374, 23672, 10974, 1255, 12428, 3337, 17475, 27018, 3752, 6195, 15306, 19461, 7909, 3084, 29677, 18803, 3372, 12801, 26263, 20818, 29710, 6577, 16445, 22945, 8175, 15698, 4824, 3350, 1592, 20410, 8063, 30238, 1173, 12431, 26635, 26798, 21327, 23671, 1007, 13790, 1918, 17594, 14137, 31600, 25845, 14755, 11660, 22191, 10267, 18893, 7118, 9101, 32572, 11905, 16066, 6261, 20396, 24500, 13262, 4555, 25772, 28112, 8573, 21204, 23830, 21584, 21399, 21477, 7100, 24739, 12862, 24097, 28640, 3978, 8999, 5644, 25481, 2086, 31788, 13863, 17776, 20942, 24193, 16564, 3528, 2094, 1484, 29890, 23165, 14298, 343, 31259, 22611, 33, 13406, 5857, 16043, 20928, 18273, 21416, 24332, 5057, 6169, 31498, 25214, 9814, 5683, 3277, 18583, 18169, 24135, 13063, 30081, 11801, 13022, 13082, 24568, 30081, 10836, 16746, 21320, 21071, 9912, 26583, 5517, 30175, 1727, 25398, 22306, 21101, 12017, 29252, 21698, 4540, 22057, 11574, 20435, 8740, 19027, 8321, 7739, 2644, 8725, 14745, 10550, 10952, 3879, 27074, 10237, 9278, 14614, 12701, 1096, 23147, 23694, 25003, 17481, 19202, 10854, 25051, 15373, 2878, 19184, 12506, 11945, 3057, 26863, 15231, 19790, 26992, 25363, 2330, 23130, 12747, 18479, 27309, 7073, 28287, 6949, 30898, 16578, 1330, 23006, 30176, 26658, 4491, 4526, 6927, 18327, 8670, 2508, 14949, 22801, 9172, 8291, 17521, 194, 27307, 3946, 22823, 23157, 16791, 6566, 4510, 5364, 2750, 26049, 5333, 32133, 23750, 24014, 15550, 24664, 6963, 6493, 27000, 7273, 23082, 9615, 11890, 14830, 21073, 17270, 26813, 12117, 7360, 5060, 16881, 30693, 3155, 10270, 15213, 29235, 26760, 27586, 26756, 13106, 16690, 19833, 10925, 10099, 28553, 32199, 28949, 13164, 26007, 8799, 15888, 27539, 9971, 24443, 20471, 5467, 32348, 8729, 20211, 23959, 18295, 6347, 16902, 9722, 27719, 14991, 15265, 11020, 29100, 31649, 9626, 20638, 32516, 15078, 26712, 19530, 11646, 28024, 5868, 15946, 12764, 30819, 13190, 15225, 24059, 1400, 8245, 24834, 12758, 17766, 21519, 10087, 1373, 2564, 14105, 23535, 12064, 4777, 9331, 6660, 719, 852, 2395, 7277, 4689, 23680, 16297, 22760, 25081, 6714, 922, 7496, 28570, 772, 21553, 28246, 1278, 14060, 22696, 7057, 17698, 18094, 22499, 21838, 10477, 27346, 24257, 7139, 10321, 11528, 11539, 27880, 8517, 6976, 32590, 541, 23628, 5079, 22093, 29908, 4645, 7056, 31695, 22368, 30311, 8188, 25988, 21700, 3541, 4608, 5485, 9507, 9820, 28304, 31174, 22296, 11924, 14107, 29044, 31900, 28575, 14685, 29158, 23924, 15539, 12025, 3167, 16236, 20220, 363, 22246, 4610, 20490, 24105, 9880, 3838, 1676, 1091, 17851, 3497, 11058, 5916, 3105, 12937, 28793, 23138, 22435, 2870, 21849, 8599, 18226, 6897, 21766, 25194, 15873, 23360, 29648, 2931, 20200, 7744, 23905, 2047, 4874, 31706, 31068, 15834, 23439, 18187, 173, 18844, 8813, 6964, 18785, 29753, 22434, 8748, 21898, 19261, 32460, 7947, 17507, 20121, 20314, 29457, 17308, 13486, 8050, 11018, 19263, 21707, 26403, 24739, 27794, 30424, 30344, 6027, 30514, 21868, 13688, 3915, 12747, 31866, 4253, 23245, 21926, 22949, 10904, 28168, 1192, 28585, 942, 31101, 14862, 25839, 12402, 19103, 4471, 20648, 15724, 8211, 8662, 25833, 26522, 8449, 30021, 26734, 31372, 28596, 15267, 28753, 27605, 15399, 23858, 19206, 2465, 12942, 17687, 29266, 14663, 16676, 32757, 31662, 13992, 14595, 11530, 4286, 32327, 19590, 30397, 14379, 19692, 13943, 32710, 18074, 28861, 24384, 13565, 13642, 17718, 21026, 21712, 29438, 19718, 29115, 31307, 16520, 11298, 9395, 8867, 6114, 7672, 25220, 8841, 12625, 19473, 22055, 28205, 27058, 22718, 27321, 5363, 32385, 16681, 11359, 2058, 19679, 26885, 15544, 13948, 10595, 25091, 17896, 28845, 19802, 18346, 15610, 26897, 6172, 13230, 20087, 26585, 25841, 23792, 21425, 18973, 2626, 3277, 8758, 29645, 9645, 10160, 19552, 25475, 978, 29809, 21096, 16232, 13018, 9393, 4767, 28857, 8364, 32207, 4914, 11408, 27636, 19966, 6756, 26752, 11132, 18325, 24456, 31838, 17346, 1768, 22900, 31853, 12196, 25517, 8513, 1752, 24400, 14030, 4770, 26942, 7910, 25341, 4504, 1470, 13991, 16841, 31128, 1613, 6862, 21492, 22007, 30786, 23664, 9117, 20821, 12824, 16173, 18438, 21013, 25020, 14053, 26629, 26666, 17960, 7869, 32495, 20408, 13529, 418, 11419, 28716, 6706, 20760, 9228, 30655, 3789, 28580, 30479, 30713, 20705, 27478, 20741, 30552, 1999, 22135, 27019, 807, 21102, 25618, 14199, 27014, 3073, 13114, 2631, 28654, 31805, 21281, 32241, 4082, 30933, 21719, 22671, 3932, 9835, 21906, 6768, 16109, 12284, 15925, 5824, 16693, 26372, 24349, 7057, 17650, 27687, 17676, 31890, 1703, 9978, 19799, 29075, 9906, 293, 5709, 27414, 16799, 8292, 22137, 12501, 23713, 16101, 23759, 23167, 2258, 18081, 996, 20546, 18636, 28137, 20305, 20680, 32219, 27154, 20032, 28074, 14411, 5108, 17548, 13775, 3718, 13924, 7772, 14343, 13229, 30975, 21436, 12561, 789, 25299, 29767, 11015, 11469, 31089, 4587, 6422, 15898, 7216, 17854, 18821, 28610, 30478, 15682, 28154, 17832, 23414, 29484, 32426, 15657, 4364, 9546, 29035, 29663, 16899, 11805, 23303, 22843, 9842, 19488, 10610, 20874, 9013, 31215, 3531, 11851, 17725, 18192, 14787, 22762, 29113, 4452, 13195, 21530, 9014, 28897, 24375, 15010, 22151, 15560, 4542, 15629, 30456, 27345, 20653, 14546, 30565, 11312, 6855, 24716, 21282, 25088, 14641, 2296, 11798, 11864, 10687, 23406, 6206, 27504, 4230, 31526, 2628, 20604, 2283, 18786, 237, 25147, 1173, 1265, 20787, 7639, 3789, 26949, 392, 11088, 18818, 17090, 13494, 4069, 10997, 6888, 29587, 29238, 21739, 25664, 573, 30672, 17032, 15761, 16270, 30124, 19476, 15163, 19173, 9159, 31593, 32728, 29507, 4563, 21825, 21801, 3597, 18133, 30926, 6231, 5921, 9368, 7655, 32649, 30594, 30032, 12141, 12027, 23182, 84, 27111, 30926, 25956, 17925, 21008, 15201, 2038, 16852, 2814, 22987, 20168, 13544, 19843, 113, 4399, 14260, 26923, 24729, 14727, 10270, 10136, 7442, 24222, 31841, 24484, 5492, 10317, 955, 13230, 16791, 6231, 23353, 24876, 31559, 12827, 20164, 17206, 29049, 32160, 7180, 32324, 2826, 26041, 2031, 15989, 13848, 28710, 26803, 30889, 26098, 15195, 24568, 10556, 11065, 9924, 21005, 28056, 3624, 3573, 20235, 13792, 16497, 19519, 22669, 32320, 16842, 3922, 16036, 1007, 15739, 8850, 30758, 9173, 19472, 5550, 31525, 30739, 7702, 15157, 29805, 10242, 9995, 22571, 23575, 20002, 27511, 29986, 29371, 2736, 29020, 28719, 19560, 5858, 13784, 10064, 3678, 4141, 4688, 11626, 20348, 22097, 2007, 3699, 17052, 19120, 17265, 19001, 11473, 31111, 23338, 14864, 11376, 12984, 18812, 31812, 24090, 23443, 17055, 30986, 7673, 31940, 13750, 32529, 19205, 13280, 20932, 15948, 9250, 11599, 30717, 18574, 6280, 9532, 11948, 25879, 20698, 10980, 19895, 12428, 17878, 11622, 24676, 32396, 19933, 10741, 29473, 25951, 8297, 32078, 27042, 10580, 27583, 31573, 11717, 3014, 12655, 24823, 21749, 24741, 11468, 12811, 19529, 23226, 21420, 23437, 7110, 32602, 20851};

        System.err.println(s.smallestDistancePair(arr, 6374362));

        timing = System.currentTimeMillis() - timing;
        System.err.println("TIMING: " + timing + "ms.");
    }

    // LC719 ** 第k小数对差 Hard
    public int smallestDistancePair(int[] nums, int k) {
        Arrays.sort(nums);
        int n = nums.length;
        int lo = 0;
        int hi = nums[n - 1];
        while (lo < hi) {
            int mid = lo + (hi - lo) / 2;
            int count = 0, left = 0, right = 0;
            for (; right < n; right++) {
                while (nums[right] - nums[left] > mid) {
                    left++;
                }
                count += right - left;
            }
            if (count >= k) hi = mid; // 找大于等于k的第一个数
            else lo = mid + 1;
        }
        return lo;
    }

    // LC958
    public boolean isCompleteTree(TreeNode root) {
        if (root == null) return true;
        Deque<TreeNode> q = new LinkedList<>();
        q.offer(root);
        int maybeLastButOneLayer = -1;
        int layer = -1;
        while (!q.isEmpty()) {
            layer++;
            int size = q.size();

            for (int i = 0; i < size; i++) {
                TreeNode tmpTreeNode = q.poll();
                // 当疑似倒数第二层出现时候, 如果该层后续节点仍有节点拥有非空子树, 则该树不可能为完全二叉树
                if (maybeLastButOneLayer != -1 && (tmpTreeNode.left != null || tmpTreeNode.right != null)) {
                    return false;
                }

                if (tmpTreeNode.left == null || tmpTreeNode.right == null) {
                    // 第一个有空子树的节点出现时, 该节点 1) 要不两个都空 2) 要不只空右子树 , 否则该树不可能为完全二叉树
                    if (tmpTreeNode.left == null && tmpTreeNode.right != null) {
                        return false;
                    }
                    maybeLastButOneLayer = layer;
                }

                if (tmpTreeNode.left != null) {
                    q.offer(tmpTreeNode.left);
                }
                if (tmpTreeNode.right != null) {
                    q.offer(tmpTreeNode.right);
                }
            }
        }

        return true;
    }

    // LC Interview 16.06
    public int smallestDifference(int[] a, int[] b) {
        Arrays.sort(a);
        Arrays.sort(b);
        long smallestDifference = Math.abs((long) a[0] - (long) b[0]);


        int aPtr = 0;
        int bPtr = 0;
        while (aPtr < a.length && bPtr < b.length) {
            // 移动aptr 还是移动bptr?
            // a<b, a右移 直到 a>=b
            while (aPtr < a.length && bPtr < b.length && a[aPtr] <= b[bPtr]) {
                smallestDifference = Math.min(smallestDifference, Math.abs((long) a[aPtr] - (long) b[bPtr]));
                aPtr++;
                if (smallestDifference == 0) return 0;
            }

            while (aPtr < a.length && bPtr < b.length && a[aPtr] >= b[bPtr]) {
                smallestDifference = Math.min(smallestDifference, Math.abs((long) a[aPtr] - (long) b[bPtr]));
                bPtr++;
                if (smallestDifference == 0) return 0;
            }
        }

        return (int) smallestDifference;
    }

    // LC326
    public boolean isPowerOfThree(int n) {
        int upper = (int) (Math.log(Integer.MAX_VALUE) / Math.log(3));
        int max3Power = (int) (Math.pow(3, upper));
        return n > 0 && max3Power % n == 0;
    }

    // LC342 Power of 4
    public boolean isPowerOfFour(int n) {
        return n > 0 && (n & (n - 1)) == 0 && (n & 0xaaaaaaaa) == 0;
    }

    // LC1074
    public int numSubmatrixSumTarget(int[][] matrix, int target) {
        int rowNum = matrix.length;
        int colNum = matrix[0].length;
        int[][] prefix = new int[rowNum + 1][colNum + 1];
        for (int i = 1; i <= rowNum; i++) {
            for (int j = 1; j <= colNum; j++) {
                prefix[i][j] = prefix[i - 1][j] + prefix[i][j - 1] - prefix[i - 1][j - 1] + matrix[i - 1][j - 1];
            }
        }

        int result = 0;

        // 枚举
        for (int i = 1; i <= rowNum; i++) {
            for (int j = 1; j <= colNum; j++) {

                // 长x宽  = i * j
                for (int row = 0; row <= rowNum - i; row++) {
                    for (int col = 0; col <= colNum - j; col++) {

                        // 四个点 upLeft upRight downLeft downRight
                        int upLeftRow = row;
                        int upLeftCol = col;
                        int upRightRow = row;
                        int upRightCol = col + j;
                        int downLeftRow = row + i;
                        int downLeftCol = col;
                        int downRightRow = row + i;
                        int downRightCol = col + j;

                        int sum = prefix[downRightRow][downRightCol] - prefix[downLeftRow][downLeftCol] - prefix[upRightRow][upRightCol] + prefix[upLeftRow][upLeftCol];
                        if (sum == target) {
                            result++;
                        }

                    }
                }
            }
        }
        return result;

    }

    // LC1629
    // LeetCode 设计了一款新式键盘，正在测试其可用性。测试人员将会点击一系列键（总计 n 个），每次一个。
    //
    // 给你一个长度为 n 的字符串 keysPressed ，其中 keysPressed[i] 表示测试序列中第 i 个被按下的键。releaseTimes 是一个升序排列的列表，其中 releaseTimes[i] 表示松开第 i 个键的时间。字符串和数组的 下标都从 0 开始 。第 0 个键在时间为 0 时被按下，接下来每个键都 恰好 在前一个键松开时被按下。
    //
    // 测试人员想要找出按键 持续时间最长 的键。第 i 次按键的持续时间为 releaseTimes[i] - releaseTimes[i - 1] ，第 0 次按键的持续时间为 releaseTimes[0] 。
    //
    // 注意，测试期间，同一个键可以在不同时刻被多次按下，而每次的持续时间都可能不同。
    //
    // 请返回按键 持续时间最长 的键，如果有多个这样的键，则返回 按字母顺序排列最大 的那个键。
    public char slowestKey(int[] releaseTimes, String keysPressed) {
        int n = keysPressed.length();
        char[] cArr = keysPressed.toCharArray();
        long[] timeCount = new long[26];
        timeCount[cArr[0] - 'a'] += releaseTimes[0];
        for (int i = 1; i < n; i++) {
            timeCount[cArr[i] - 'a'] = Math.max((long) releaseTimes[i] - (long) releaseTimes[i - 1], timeCount[cArr[i] - 'a']);
        }
        long max = timeCount[0];
        char ans = 'a';
        for (int i = 1; i < 26; i++) {
            if (timeCount[i] >= max) {
                max = timeCount[i];
                ans = (char) ('a' + i);
            }
        }
        return ans;
    }

    // LC472 这都行???
    List<String> lc472Result = new LinkedList<>();
    Trie lc472Trie;

    public List<String> findAllConcatenatedWordsInADict(String[] words) {
        lc472Trie = new Trie();
        for (String word : words) {
            if (!word.equals("")) {
                lc472Trie.insert(word);
            }
        }
        for (String word : words) {
            if (!word.equals("")) {
                if (lc472Helper(word, 0, 1, 0)) {
                    lc472Result.add(word);
                }
            }
        }
        return lc472Result;
    }

    private boolean lc472Helper(String word, int idx, int cur, int ctr) {
        if (cur >= word.length()) {
            if (lc472Trie.search(word.substring(idx)) && ctr >= 1) {
                return true;
            }
            return false;
        }
        if (!lc472Trie.startsWith(word.substring(idx, cur))) {
            return false;
        }
        if (lc472Trie.search(word.substring(idx, cur)) && lc472Helper(word, cur, cur + 1, ctr + 1)) {
            return true;
        }
        return lc472Helper(word, idx, cur + 1, ctr);
    }

    // 标准蓄水池抽样算法, 通常nums的长度很大, 或是只是一个链表头节点, 未知总长度
    public int[] reservoirSampling(int[] nums, int m) {
        int[] result = new int[m];
        int total = 0;
        int count = 0;
        Random r = new Random();
        for (int i : nums) {
            total++;
            if (count < m) {
                result[count++] = i;
            } else {
                int ran = r.nextInt(total);
                if (ran >= 0 && ran < m) {
                    result[ran] = i;
                }
            }
        }
        return result;
    }

    // LC398
    public int pick(int target, int[] nums) {
        Random r = new Random();
        int count = 0, result = 0;
        for (int i = 0; i < nums.length; ++i) {
            if (nums[i] == target) {
                count++;
                if (r.nextInt(count) == 0) { // 蓄水池大小为1, 落在[0,1)范围的数即只有0
                    result = i;
                }
            }
        }
        return result;
    }

    // LC382 流中的随机抽样问题, 蓄水池算法
    ListNode h;
    ListNode dummy = new ListNode(-1);
    Random r = new Random();
    int len = -1;

    public int getRandom() {
        // 蓄水池算法, 以1/n的概率保留第n个数, 每个数的期望概率都是1/len
        int reserve = 0;
        ListNode cur = h;
        int count = 0;
        while (cur != null) {
            count++;
            int ran = r.nextInt(count);
            if (ran == 0) {
                reserve = cur.val;
            }
            cur = cur.next;
        }
        return reserve;
    }

    public int getRandomMy() {
        int nth;
        if (len == -1) {
            nth = r.nextInt();
        } else {
            nth = r.nextInt(len);
        }

        ListNode ptr = h;
        int ctr = 1;
        while (ptr.next != null && ctr <= nth) {
            ptr = ptr.next;
            ctr++;
        }
        if (ptr.next == null) {
            len = ctr;
        }
        return ptr.val;

    }

    // LC1298 Learn from Solution
    public int maxCandiesS(int[] status, int[] candies, int[][] keys, int[][] containedBoxes, int[] initialBoxes) {
        int n = status.length;
        int ans = 0;
        boolean[] hasBox = new boolean[n];
        boolean[] canOpen = new boolean[n];
        boolean[] visited = new boolean[n];
        Deque<Integer> boxQueue = new LinkedList<>();
        for (int i = 0; i < n; i++) {
            if (status[i] == 1) {
                canOpen[i] = true;
            }
        }
        for (int i : initialBoxes) {
            hasBox[i] = true;
            if (canOpen[i]) {
                boxQueue.offer(i);
                visited[i] = true;
                ans += candies[i];
            }
        }
        while (!boxQueue.isEmpty()) {
            int frontBoxIdx = boxQueue.poll();
            for (int key : keys[frontBoxIdx]) {
                canOpen[key] = true;
                if (!visited[key] && hasBox[key]) {
                    boxQueue.offer(key);
                    visited[key] = true;
                    ans += candies[key];
                }
            }
            for (int box : containedBoxes[frontBoxIdx]) {
                hasBox[box] = true;
                if (!visited[box] && canOpen[box]) {
                    boxQueue.offer(box);
                    visited[box] = true;
                    ans += candies[box];
                }
            }
        }
        return ans;
    }

    // LC1298 Hard BFS
    // 给你n个盒子，每个盒子的格式为[status, candies, keys, containedBoxes]，其中：
    //
    // 状态字status[i]：整数，如果box[i]是开的，那么是 1，否则是 0。
    // 糖果数candies[i]: 整数，表示box[i] 中糖果的数目。
    // 钥匙keys[i]：数组，表示你打开box[i]后，可以得到一些盒子的钥匙，每个元素分别为该钥匙对应盒子的下标。
    // 内含的盒子containedBoxes[i]：整数，表示放在box[i]里的盒子所对应的下标。
    // 给你一个initialBoxes 数组，表示你现在得到的盒子，你可以获得里面的糖果，也可以用盒子里的钥匙打开新的盒子，还可以继续探索从这个盒子里找到的其他盒子。
    //
    // 请你按照上述规则，返回可以获得糖果的 最大数目。
    //
    // 每个盒子最多被一个盒子包含。
    public int maxCandies(int[] status, int[] candies, int[][] keys, int[][] containedBoxes, int[] initialBoxes) {
        Set<Integer> acquiredKey = new HashSet<>();
        Deque<Integer> boxVisitQueue = new LinkedList<>();
//        Set<Integer> visited = new HashSet<>();
        int[] noKeyCounter = new int[status.length];
        int ans = 0;
        for (int i : initialBoxes) {
            boxVisitQueue.offer(i);
        }
        while (!boxVisitQueue.isEmpty()) {
            int tmpBoxIdx = boxVisitQueue.poll();
//            if (visited.contains(tmpBoxIdx)) {
//                continue;
//            }
            if (status[tmpBoxIdx] == 1 || acquiredKey.contains(tmpBoxIdx)) {
                ans += candies[tmpBoxIdx];
                for (int j : containedBoxes[tmpBoxIdx]) {
                    boxVisitQueue.offer(j);
                }
                for (int j : keys[tmpBoxIdx]) {
                    acquiredKey.add(j);
                }
//                visited.add(tmpBoxIdx);
            } else {
                noKeyCounter[tmpBoxIdx]++;
                if (noKeyCounter[tmpBoxIdx] > status.length) {
                    break;
                }
                boxVisitQueue.offer(tmpBoxIdx);
            }
        }
        return ans;
    }

    // LC477 Solution
    public int totalHammingDistance(int[] nums) {
        int ans = 0, n = nums.length;
        for (int i = 0; i < 30; i++) {
            int c = 0;
            for (int val : nums) {
                c += (val >> i) & 1;
            }
            ans += c * (n - c);
        }
        return ans;
    }

    // LC874
    public int robotSim(int[] commands, int[][] obstacles) {
        // -2 左转90度
        // -1 右转90度
        int x = 0, y = 0;
        int direct = 0; // 0 - 北, 1 - 东 , 2 - 南, 3 - 西
        int[][] step = new int[][]{{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        int ans = 0;
        Set<Pair<Integer, Integer>> obSet = new HashSet<>();
        for (int[] i : obstacles) {
            obSet.add(new Pair<>(i[0], i[1]));
        }
        for (int c : commands) {
            if (c < 0) {
                if (c == -2) {
                    direct = (direct + 4 - 1) % 4;
                } else if (c == -1) {
                    direct = (direct + 1) % 4;
                }
            } else {
                for (int j = 0; j < c; j++) {
                    if (!obSet.contains(new Pair<>(x + step[direct][0], y + step[direct][1]))) {
                        x += step[direct][0];
                        y += step[direct][1];
                        ans = Math.max(ans, x * x + y * y);
                    } else {
                        break;
                    }
                }
            }
        }
        return ans;
    }
}


class ListNode {
    int val;
    ListNode next;

    ListNode() {
    }

    ListNode(int val) {
        this.val = val;
    }

    ListNode(int val, ListNode next) {
        this.val = val;
        this.next = next;
    }
}

class Trie {
    Map<String, Boolean> m;

    /**
     * Initialize your data structure here.
     */
    public Trie() {
        m = new HashMap<>();
    }

    /**
     * Inserts a word into the trie.
     */
    public void insert(String word) {
        for (int i = 0; i < word.length(); i++) {
            m.putIfAbsent(word.substring(0, i + 1), false);
        }
        m.put(word, true);
    }

    /**
     * Returns if the word is in the trie.
     */
    public boolean search(String word) {
        return m.getOrDefault(word, false);
    }

    /**
     * Returns if there is any word in the trie that starts with the given prefix.
     */
    public boolean startsWith(String prefix) {
        return m.containsKey(prefix);
    }
}

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode() {
    }

    TreeNode(int val) {
        this.val = val;
    }

    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}